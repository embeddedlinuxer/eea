/****************************************************************************/
/* Phase Dynamics, Inc.							    						*/
/* 1251 Columbia Dr.                                                        */
/* Richardson, TX 75081                                                     */
/* 972-680-1550    972-680-3262 fax                                         */
/*									    									*/
/* (C)2011 Phase Dynamics, Inc.						    					*/
/* This code is not to be used in any capacity without explicit consent by  */
/* Phase Dynamics, Inc.  Violators will be prosecuted to the fullest extent */
/* of the law.  Please contact Phase Dynamics, Inc. if you wish to use this */
/* code.  Thank you for your cooperation.                                   */
/*									    									*/
/* File Name: MENU.C						    							*/
/* 									    									*/
/* File Description:							    						*/
/*									    									*/
/****************************************************************************/
#define MENU_H

#include "GLBLS.H"
#include "MENU.H"

/* MAIN MENU LOOP */
void MENU_PAGE_CPYRT(void);
void MENU_PAGE_MAIN(void);
void MENU_PAGE_STREAM_SELECT(void);
void MENU_PAGE_ALYESKA_PLC_DATA_ADDR(void);
void MENU_PAGE_UNLOCK_WPROT(void);
void MENU_PAGE_GOTO_TECH_MODE(void);
void MENU_PAGE_CHPW_WPROT(void);
void MENU_PAGE_CHPW_TECH_MODE(void); 
void MENU_PAGE_PHASE_HOLDOVER(void);		/*Phase Hold Over on LCD RS*/
void MENU_PAGE_NUMSAMP(void);
void MENU_PAGE_SALINITY(void);
void MENU_FORCE_PHASE(void); 				/*Add option to force phase on each stream RS*/  
void MENU_PAGE_T_UNIT(void);
void MENU_PAGE_T_ADJ(void);
void MENU_PAGE_T_AVG(void);  				/*RS*/ 
void MENU_PAGE_LOW_SALT_MODE(void);    		/*RS*/
void MENU_PAGE_LOW_SALT_THRESHOLD(void);	/*RS*/
void MENU_PAGE_OIL_ADJ(void);         
void MENU_PAGE_WATER_ADJ(void);
void MENU_PAGE_ALARM_HI(void);
void MENU_PAGE_ALARM_LO(void);
void MENU_PAGE_WATER_IDX(void);
void MENU_PAGE_WATER_LO(void);
void MENU_PAGE_WATER_HI(void);
void MENU_PAGE_OIL_IDX(void);
void MENU_PAGE_OIL_LO(void);
void MENU_PAGE_OIL_HI(void);
void MENU_PAGE_OIL_P1(void);
void MENU_PAGE_OIL_P0(void);
void MENU_PAGE_DIAG(void);
void MENU_PAGE_CAL_OIL(void);
void MENU_PAGE_CAL_WATER(void);
void MENU_PAGE_CAPTURE_OIL(void);
void MENU_PAGE_CAPTURE_WATER(void);
void MENU_PAGE_WATERCUT_RAW(void);
void MENU_PAGE_ACCUMN(int n);
void MENU_PAGE_ACCUMG(int n);
void MENU_PAGE_AVGACCUM(int n);				/* Average Watercut Percentage BC */
void MENU_PAGE_FLOW(int n);
void MENU_PAGE_NET_FLOW(int n);
void MENU_PAGE_DENSITY(int n);
void MENU_PAGE_INFO(void);
void MENU_PAGE_PORT_CFG(void);
void MENU_PAGE_RESTART(void);
void MENU_PAGE_RESTORE_FACTORY_DEFAULTS(void);
void MENU_TIME_DATE(void);
void MENU_RELAY_CFG(void);
void MENU_AI_CFG(void);
void MENU_AO_CFG(void);  
void MENU_PAGE_TRIM_RTD_SELECT(void);
//void MENU_PAGE_TRIM_RTD_LO(void); 			/*Trim RTD on LCD DISPLAY -RS*/  
//void MENU_PAGE_ASSURE_TRIM_RTD_LO(void); 	/*Add are you sure screens for LCD RS*/
//void MENU_PAGE_TRIM_RTD_HI(void); 			/*Trim RTD on LCD DISPLAY -RS*/   
//void MENU_PAGE_ASSURE_TRIM_RTD_HI(void); 	/*Add are you sure screens for LCD RS*/
void MENU_DENSITY(int n);
void MENU_OIL_CALC_MODE(void);

void MENU_LOG_DATA(void);

/*** Data Logging Sub-Menu ***/
void MENU_LOG_DATA_ENABLE(void);
void MENU_LOG_DATA_STATUS(void);

/* DENSITY CORRECTION SUB-MENU */
void MENU_DENSITY_CORRECTION(void);
void MENU_Density_Cal_Unit(void);
void MENU_Density_Cal(void);
void MENU_Density_D3(void);					/*third order density correction RS*/  
void MENU_Density_D2(void);					/*third order density correction RS*/
void MENU_Density_D1(void);
void MENU_Density_D0(void);
void MENU_Density_ADJ(void);
void MENU_DCM_PORT(void);
void MENU_DCM_CFG_CUTOFF(void);
void MENU_DCM_CFG_DAMP_DENSITY(void);
void MENU_DCM_CFG_DAMP_FR(void);
void MENU_DCM_ZERO(void);

/* FLOW COMPUTER SUB-MENU */
void MENU_FLOW_COMPUTER(void);
void MENU_FC_ENABLE_FLOW(int n);
void MENU_FC_ENABLE_GROSS(int n);
void MENU_FC_ENABLE_PULSE(int n);
void MENU_FC_ENABLE_DENSITY(int n);
void MENU_FC_ENABLE_NET(int n);
void MENU_FC_FLOW_CLASS(int n);
void MENU_FC_FLOW_UNIT(int n);
void MENU_FC_ACCUM_UNIT(int n);
void MENU_FC_PULSES_PER_VOL_UNIT(int n);
void MENU_FC_TEMP_UNIT(int n);
void MENU_FC_DENSITY_UNIT(int n);
void MENU_FC_PRESSURE_UNIT(int n);
void MENU_FC_MAN_WATERCUT(int n);
void MENU_FC_MAN_TEMP(int n);
void MENU_FC_MAN_SALINITY(int n);
void MENU_FC_MAN_DENSITY(int n);
void MENU_FC_MAN_PRESSURE(int n);
void MENU_FC_MAN_FLOW(int n);
void MENU_FC_USE_PDI_WATERCUT(int n);
void MENU_FC_USE_PDI_TEMP(int n);
void MENU_FC_USE_PDI_SALINITY(int n);
void MENU_FC_API_TABLE(int n);
void MENU_FC_API_C_ALPHA(int n);
void MENU_FC_DENSITY_ADJ(int n);
void MENU_FC_METER_FACTOR(int n);
void MENU_FC_SHRINKAGE(int n);
void MENU_FC_OIL_DENSITY_ST(int n);
void MENU_FC_WATER_DENSITY_ST(int n);
void MENU_FC_FLOW(int n);
void MENU_FC_WATERCUT(int n);
void MENU_FC_PRESSURE(int n);
void MENU_FC_TEMP(int n);
void MENU_FC_SALINITY(int n);
void MENU_FC_EMUL_DENSITY(int n);
void MENU_FC_OIL_DENSITY_PT(int n);
void MENU_FC_WATER_DENSITY_PT(int n);

const int MENU_PAGE_USER[] = 	{
									(int)&MENU_PAGE_CPYRT,
									(int)&MENU_PAGE_MAIN,
									(int)&MENU_PAGE_UNLOCK_WPROT,
									(int)&MENU_PAGE_INFO,
									(int)&MENU_PAGE_DIAG,
									(int)&MENU_PAGE_STREAM_SELECT,
									(int)&MENU_PAGE_GOTO_TECH_MODE,
									0
								};

const int MENU_PAGE_NORMAL[] = 	{
									(int)&MENU_PAGE_CPYRT,
									(int)&MENU_PAGE_MAIN,
									(int)&MENU_PAGE_UNLOCK_WPROT,
									(int)&MENU_PAGE_INFO,
									(int)&MENU_PAGE_DIAG,
									(int)&MENU_PAGE_NUMSAMP,
									(int)&MENU_PAGE_STREAM_SELECT,
									(int)&MENU_PAGE_T_ADJ,
									(int)&MENU_PAGE_T_AVG, /*RS*/ 
									(int)&MENU_PAGE_CAPTURE_OIL,
									(int)&MENU_PAGE_CAL_OIL,
									(int)&MENU_PAGE_CAPTURE_WATER,
									(int)&MENU_PAGE_CAL_WATER,
									(int)&MENU_PAGE_OIL_ADJ,
									(int)&MENU_PAGE_SALINITY,
									(int)&MENU_Density_ADJ,
									(int)&MENU_PAGE_GOTO_TECH_MODE,
									0
								};

const int MENU_PAGE_TECH[] = 	{
									(int)&MENU_PAGE_CPYRT,
									(int)&MENU_PAGE_MAIN,
									(int)&MENU_PAGE_UNLOCK_WPROT,
									(int)&MENU_PAGE_CHPW_TECH_MODE,
									(int)&MENU_PAGE_CHPW_WPROT,
									(int)&MENU_PAGE_INFO,
									(int)&MENU_PAGE_DIAG,
									(int)&MENU_TIME_DATE, 
									(int)&MENU_PAGE_PHASE_HOLDOVER, /*Phase Hold Over on LCD RS*/
									(int)&MENU_PAGE_NUMSAMP,
									(int)&MENU_PAGE_STREAM_SELECT,  
									(int)&MENU_FORCE_PHASE, 		/*Add option to force phase on each stream RS*/ 
									(int)&MENU_PAGE_T_UNIT,
									(int)&MENU_PAGE_T_ADJ,
									(int)&MENU_PAGE_T_AVG,   		/*RS*/ 
									(int)&MENU_PAGE_CAPTURE_OIL,
									(int)&MENU_PAGE_CAL_OIL,
									(int)&MENU_PAGE_CAPTURE_WATER,
									(int)&MENU_PAGE_CAL_WATER,
									(int)&MENU_PAGE_OIL_ADJ,
									(int)&MENU_PAGE_WATER_ADJ,
									(int)&MENU_PAGE_SALINITY,
									(int)&MENU_PAGE_ALARM_LO,
									(int)&MENU_PAGE_ALARM_HI,
									(int)&MENU_PAGE_OIL_IDX,
									(int)&MENU_PAGE_WATER_IDX,
									(int)&MENU_PAGE_OIL_LO,
									(int)&MENU_PAGE_OIL_HI,
									(int)&MENU_PAGE_WATER_LO,
									(int)&MENU_PAGE_WATER_HI,
									(int)&MENU_PAGE_OIL_P1,
									(int)&MENU_PAGE_OIL_P0,
									(int)&MENU_PAGE_PORT_CFG,
									(int)&MENU_RELAY_CFG,
									(int)&MENU_AI_CFG,
									(int)&MENU_AO_CFG,
									(int)&MENU_PAGE_TRIM_RTD_SELECT,
									//(int)&MENU_PAGE_TRIM_RTD_LO, 			/*Trim RTD on LCD DISPLAY -RS*/ 
									//(int)&MENU_PAGE_ASSURE_TRIM_RTD_LO,   	/*Add are you sure screens for LCD RS*/
									//(int)&MENU_PAGE_TRIM_RTD_HI, 			/*Trim RTD on LCD DISPLAY -RS*/
									//(int)&MENU_PAGE_ASSURE_TRIM_RTD_HI,   	/*Add are you sure screens for LCD RS*/
									(int)&MENU_PAGE_ALYESKA_PLC_DATA_ADDR,
									(int)&MENU_DENSITY_CORRECTION,
									(int)&MENU_DCM_PORT,
									(int)&MENU_DCM_CFG_DAMP_DENSITY,
									(int)&MENU_DCM_CFG_DAMP_FR,
									(int)&MENU_DCM_CFG_CUTOFF,
									(int)&MENU_DCM_ZERO,
									(int)&MENU_Density_Cal_Unit,
									(int)&MENU_Density_Cal,
									(int)&MENU_Density_D3, /*third order density correction RS*/
									(int)&MENU_Density_D2, /*third order density correction RS*/
									(int)&MENU_Density_D1,
									(int)&MENU_Density_D0,
									(int)&MENU_Density_ADJ,
									(int)&MENU_OIL_CALC_MODE,
									(int)&MENU_FLOW_COMPUTER,
									(int)&MENU_LOG_DATA,
									(int)&MENU_PAGE_RESTART,
									(int)&MENU_PAGE_RESTORE_FACTORY_DEFAULTS,
									0
								};

/****************************************************************************/
/* MENU INIT																*/
/*                                                                          */
/* Description: Initializes the global MENU struct                          */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       none                                                        */
/*                                                                          */
/****************************************************************************/
void MENU_INIT(void)
{
	MSVE.INIT				= TRUE;
	DIO_MSVE				= 0;
	MSVE.M					= 0x00;
	MSVE.S					= 0x00;
	MSVE.V					= 0x00;
	MSVE.E					= 0x00;
	MSVE.MENU				= FALSE;
	MSVE.SELECT				= FALSE;
	MSVE.VALUE				= FALSE;
	MSVE.ENTER				= FALSE;
	MSVE.DIR				= 0;
	MSVE.DIR_CHANGE			= FALSE;
	MSVE.CURSOR_ENABLED		= FALSE;
	MSVE.CURSOR_ROW			= 0;
	MSVE.CURSOR_COL			= 0;
	MSVE.CNT				= 0;
	MSVE.MENU_CNT			= 0;
	MSVE.VALUE_CNT			= 0;
	MSVE.SELECT_CNT			= 0;
	MSVE.MODE_LOCKDOWN		= FALSE;
	MSVE.MODE_WPROT			= FALSE;
	MSVE.MODE_DEFINE		= FALSE;
	MSVE.MODE_USER			= FALSE;
	MSVE.MODE_TECH			= FALSE;
	MSVE.MODE_NORMAL		= FALSE;
	MSVE.PAGE				= 0;
	MSVE.SUBPAGE			= 0;
	MSVE.MENU_TRAP			= FALSE;
	MSVE.DIP[0]				= 0x00;
	MSVE.DIP[1]				= 0x00;
	MSVE.DIP[2]				= 0x00;
	MSVE.DIP[3]				= 0x00;
	MSVE.FRESH				= TRUE;

	VAR_Initialize(&MSVE.tmpv, c_not_used, u_generic_not_used, 100.0, 1000.0, var_no_bound|var_no_alarm);
	VAR_Update(&MSVE.tmpv, 0.0, 0, 0);
	sprintf(MSVE.tmpv.name, "MSVE Variable");

	MSVE.ptmpv				= (VAR*) 0;
	MSVE.tbl				= NULL_PTR;
}

/****************************************************************************/
/* MENU REFRESH																*/
/*                                                                          */
/* Description: I guess this refreshes the screen.                          */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Will have to come back to this one.                         */
/*                                                                          */
/****************************************************************************/
void MENU_REFRESH(void)
{
	unsigned char tmp;	/* LCD DIP switch */
	int i;				/* counter 		  */
	BOOL CHANGE;		/* LCD DIP 1 or 2 */

	_GIEP;
	i 			 = (*MSVE_IN & 0xFF) ^ 0xFF;
	i 			 = i << 8;
	DIO_MSVE	&= 0x00FF;
	DIO_MSVE 	|= i;
	MSVE.M 		 = MSVE.M<<1;
	MSVE.S 		 = MSVE.S<<1;
	MSVE.V 		 = MSVE.V<<1;
	MSVE.E 		 = MSVE.E<<1;

	if (DIO_MSVE & _M1) 
		MSVE.M |= 0x01;
	
	if (DIO_MSVE & _S1) 
		MSVE.S |= 0x01;
	
	if (DIO_MSVE & _V1) 
		MSVE.V |= 0x01;
	
	if (DIO_MSVE & _E1) 
		MSVE.E |= 0x01;
	
	if (DIO_MSVE & _M1a) 
		MSVE.M |= 0x01;
	
	if (DIO_MSVE & _S1a) 
		MSVE.S |= 0x01;
	
	if (DIO_MSVE & _V1a) 
		MSVE.V |= 0x01;
	
	if (DIO_MSVE & _E1a) 
		MSVE.E |= 0x01;

	MSVE.M &= 0x03;
	MSVE.S &= 0x03;
	MSVE.V &= 0x03;
	MSVE.E &= 0x03;

	if (MSVE.M==0x03) 
		MSVE.MENU_CNT++;
	else 
		MSVE.MENU_CNT = 0;

	if (MSVE.S==0x03) 
		MSVE.SELECT_CNT++;
	else 
		MSVE.SELECT_CNT = 0;

	if (MSVE.V==0x03) 
		MSVE.VALUE_CNT++;
	else 
		MSVE.VALUE_CNT = 0;

	if (MSVE.M==0x01) 
		MSVE.MENU = TRUE;
	else 
		MSVE.MENU = FALSE;

	if (MSVE.S==0x01) 
		MSVE.SELECT = TRUE;
	else 
		MSVE.SELECT = FALSE;

	if (MSVE.V==0x01) 
		MSVE.VALUE = TRUE;
	else 
		MSVE.VALUE = FALSE;

	if (MSVE.E==0x01) 
		MSVE.ENTER = TRUE;
	else 
		MSVE.ENTER = FALSE;

	for (i=0;i<4;i++) 
		MSVE.DIP[i] = MSVE.DIP[i]<<1;

	if (LCD_PRESENT)
		tmp = (LCD_DIPSW & 0xFF) ^ 0xFF;
	else
		tmp = LCD_DIP1;
	
	if (tmp & LCD_DIP1) 
		MSVE.DIP[0] |= 0x01;
	
	if (tmp & LCD_DIP2) 
		MSVE.DIP[1] |= 0x01;
	
	if (tmp & LCD_DIP3) 
		MSVE.DIP[2] |= 0x01;
	
	if (tmp & LCD_DIP4) 
		MSVE.DIP[3] |= 0x01;

	CHANGE = FALSE;
	
	for (i=0;i<4;i++)
	{
		MSVE.DIP[i] &= 0x03;

		if ((MSVE.DIP[i]==0x01) || (MSVE.DIP[i]==0x02))
			CHANGE = TRUE;
	}

	if (MSVE.FRESH) 
		MSVE.MENU_TRAP = FALSE;

	/*** determine menu ***/
	MSVE.MODE_LOCKDOWN		= FALSE;
	MSVE.MODE_WPROT			= FALSE;
	MSVE.MODE_DEFINE		= FALSE;
	MSVE.MODE_USER			= FALSE;
	MSVE.MODE_TECH			= FALSE;
	MSVE.MODE_NORMAL		= FALSE;

	if ((MSVE.DIP[2]==0x03) && (DIO_LOCK[2].val))
		MSVE.MODE_WPROT = TRUE;
	
	if (MSVE.DIP[3]==0x03)
		MSVE.MODE_LOCKDOWN = TRUE;
	
	if ((!DIO_LOCK[3].val) || ((MSVE.DIP[0]==0x03) && (MSVE.DIP[1]==0x00)))
		MSVE.MODE_TECH = TRUE;
	else if ((MSVE.DIP[0]==0x00) && (MSVE.DIP[1]==0x03))
		MSVE.MODE_USER = TRUE;
	else if ((MSVE.DIP[0]==0x03) && (MSVE.DIP[1]==0x03))
		MSVE.MODE_DEFINE = TRUE;
	else
		MSVE.MODE_NORMAL = TRUE;
	/*** determine menu ***/

	if ((!MSVE.MENU_TRAP) && (!MSVE.MODE_LOCKDOWN))
	{/* only works in main menu ring */
		if ((MSVE.MENU_CNT>20) && (!MSVE.DIR_CHANGE))
		{
			MSVE.DIR 		^= 0x01;
			MSVE.DIR_CHANGE  = TRUE;
		}
		else if ((MSVE.DIR_CHANGE) && (MSVE.MENU_CNT<40))
		{
			if (MSVE.M==0x00)
			{
				MSVE.FRESH 		= TRUE;
				MSVE.DIR_CHANGE = FALSE;
			}
			else
			{
				if (MSVE.DIR)
				{
					for (i=0;i<4;i++)
						sprintf(LCD_DISPLAY[i],"<<<<<<<<<<<<<<<<<<<<");
				}
				else
				{
					for (i=0;i<4;i++)
						sprintf(LCD_DISPLAY[i],">>>>>>>>>>>>>>>>>>>>");
				}
				
				GIEP;
				return;
			}
		}
	}

	if ((!MSVE.INIT) && (CHANGE || (MSVE.MENU_CNT>40)))
	{
		DIO_LOCK[2].val			= TRUE;
		DIO_LOCK[3].val			= TRUE;
		MSVE.CURSOR_ENABLED		= FALSE;
		MSVE.DIR				= 0;
		MSVE.CURSOR_ROW			= 0;
		MSVE.CURSOR_COL			= 0;
		MSVE.CNT				= 0;
		MSVE.MENU_CNT			= 0;
		MSVE.SELECT_CNT			= 0;
		MSVE.VALUE_CNT			= 0;
		MSVE.PAGE				= 1;
		MSVE.SUBPAGE			= 0;
		MSVE.FRESH				= TRUE;
		MSVE.MENU_TRAP			= FALSE;
		MSVE.DIR_CHANGE			= FALSE;
	}

	if (MSVE.MODE_NORMAL)
		MSVE.tbl = (int*) &MENU_PAGE_NORMAL;
	else if (MSVE.MODE_TECH)
		MSVE.tbl = (int*) &MENU_PAGE_TECH;
	else if (MSVE.MODE_USER)
		MSVE.tbl = (int*) &MENU_PAGE_USER;
	else
	{
		for (i=0;i<4;i++)
			sprintf(LCD_DISPLAY[i],"                    ");
		
		MSVE.CNT++;
		GIEP;
		
		return;
	}

	if (MSVE.MODE_LOCKDOWN)
	{/* disable all functions - NOTE: ASSUME SELECT WILL ONLY CHANGE SUB SCREENS ON MAIN PAGE OF EACH MENU */
		if (MSVE.tbl[MSVE.PAGE]!=(int)&MENU_PAGE_MAIN) 
			MSVE.SELECT = FALSE;
		
		MSVE.MENU  = FALSE;
		MSVE.VALUE = FALSE;
		MSVE.ENTER = FALSE;
	}
	else if (MSVE.MODE_WPROT)
	{
		if	((MSVE.tbl[MSVE.PAGE]!=(int)&MENU_PAGE_UNLOCK_WPROT)&&
			 (MSVE.tbl[MSVE.PAGE]!=(int)&MENU_PAGE_GOTO_TECH_MODE))
		{
			if (MSVE.tbl[MSVE.PAGE]!=(int)&MENU_PAGE_MAIN) 
				MSVE.SELECT = FALSE;
			
			MSVE.VALUE = FALSE;
			MSVE.ENTER = FALSE;
		}
	}

	if (MSVE.MENU && !MSVE.MENU_TRAP)
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
		
		MSVE.SUBPAGE			= 0;
		MSVE.CNT				= 0;
		MSVE.FRESH				= TRUE;
		MSVE.CURSOR_ENABLED		= FALSE;
		MSVE.MENU				= FALSE;
		TRIM_RTD_LO 			= FALSE;      /*Add are you sure screens for LCD RS*/
		TRIM_RTD_HI 			= FALSE;      /*The MSVE.MENU control on the submenu doesn't work RS*/
	}
	else if (MSVE.SELECT)
	{
		MSVE.SUBPAGE++;
		MSVE.CNT = 0;
	}

	if (!MSVE.DIR)
	{
		for (i=0;i<=MSVE.PAGE;i++)
		{
			if (MSVE.tbl[i]==0)
			{
				MSVE.PAGE = 1;
				
				break;
			}
		}
	}
	else
	{
		if (MSVE.PAGE<1)
		{/* go to last page */
			MSVE.PAGE 	= 1;
			i 			= 1;
			
			while(1)
			{
				if (MSVE.tbl[i]==0) 
					break;
				
				MSVE.PAGE = i;
				i++;
			}
		}
	}

	vect_m = (int*)MSVE.tbl[MSVE.PAGE];

    PUSH_ALL;
	asm("		.global _vect_m    ");
    asm("	ldp		_vect_m        ");
    asm("	ldi		@_vect_m, R0   ");
    asm("	callnz	R0		   	   ");	/* call if vect != NULL */
    POP_ALL;

	MSVE.CNT++;
	GIEP;
}

/****************************************************************************/
/* UPDATE FLAGS GOTO NEXT MENU												*/
/*                                                                          */
/* Description: Updates configuration and goes to next menu.                */
/*                                                                          */
/* Arguments:   BOOL cfg 	  - write config to user?						*/
/*				BOOL skip_adv - go to next menu?                            */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       if 0,1 sets CURSOR_ENABLED to false.                        */
/*                                                                          */
/****************************************************************************/
void Update_Flags_Goto_Next_Menu(BOOL cfg, BOOL skip_adv)
{
	if (cfg)
	{/* update CFG flags */
	/*todo: log config changes*/
		CHANGE = TRUE;

		if (CHANGE) 
			Write_CFG_USER();

		HCHANGE[0] = TRUE;
		HCHANGE[1] = TRUE;
		HCHANGE_COUNTER++;
	}

	if (!skip_adv)
	{/* advance to next menu item */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
		
		MSVE.SUBPAGE			= 0;
		MSVE.CNT				= 0;
		MSVE.FRESH				= TRUE;
	}

	MSVE.CURSOR_ENABLED		= FALSE;
}

/****************************************************************************/
/* MSVE DATA INPUT															*/
/*                                                                          */
/* Description: Formats screen output and controls editing data.            */
/*                                                                          */
/* Arguments:   CHAR POINTER title		- title string						*/
/*				CHAR POINTER varname	- variable name string				*/
/*				INT iw					- int number width					*/
/*				INT ip					- int decimal point width			*/
/*				BOOL is					- sign?								*/
/*				BOOL sci				- scientific notation?				*/
/*				VAR POINTER var			- input variable					*/
/*				BOOL skip_save			- skip updating user config?		*/
/*				BOOL skip_adv			- skip going to next screen?		*/
/*				                                                            */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       none                                                        */
/*                                                                          */
/****************************************************************************/
void MSVE_Data_Input(char* title, char* varname, int iw, int ip, BOOL is, BOOL sci, VAR* v, BOOL skip_save, BOOL skip_adv)
{
	int r,i,j,k1,k2,k3,m,w,p,s,vnl;	/* variable update check; counter; string format offset; t1 length; t2 length; u length; min/max; number; decimal point; sign; variable name length */
	char f[101];	/* number value */
	char t1[101];	/* title and unit string */
	char t2[101];	/* MVSE.tmpf[2] */
	char u[8];		/* unit string */
	char str[101];	/* variable name */

	_GIEP;
	w = iw;
	p = ip;
	s = is;

	if (MSVE.FRESH)
	{
		m = 0;

		if (title[0] == 0x00) 
			title = v->name;

		sprintf(MSVE.str[0],"");
		sprintf(MSVE.str[1],"");
		Get_Unit(v->class, v->unit, u);
		
		k3 = strlen(u);

		if (k3>0)
			sprintf(t1,"%s (%s)",title,u);
		else
			sprintf(t1,"%s",title);
		
		i = strlen(t1);

		if ((i>20) && (k3>0))
		{/* adjust title/unit to fit on screen */
			sprintf(t1,"%s",title);
			
			i = strlen(t1);
			j = (20-i)/2;
			
			if (j<0) 
				j = 0;
			
			sprintf(MSVE.str[0],"                    ");
			strcpy(MSVE.str[0]+j, t1);
			sprintf(t1,"(%s)",u);
			
			i = strlen(t1);
			j = (20-i)/2;
			
			if (j<0) 
				j = 0;
			
			sprintf(MSVE.str[1],"                    ");
			strcpy(MSVE.str[1]+j, t1);
			strcpy(LCD_DISPLAY[0], MSVE.str[0]);
		}
		else
		{/* center title/unit string */
			j = (20-i)/2;
			
			if (j<0) 
				j = 0;
			
			sprintf(LCD_DISPLAY[0],"                    ");
			strcpy(LCD_DISPLAY[0]+j, t1);
		}

		if (w>20)
			w = 20;
		
		if (p>6)
			p = 6;
		
		if ((v->STAT & var_no_bound)==0)
		{/* bounded */
			MSVE.tmpf[0] = VAR_Get_Unit_Param(v, reg_direct_bmin, 0, 1);
			MSVE.tmpf[2] = VAR_Get_Unit_Param(v, reg_direct_bmax, 0, 1);

			if (!s && ((MSVE.tmpf[0]<0) || (MSVE.tmpf[2]<0)))
			{
				s = TRUE;
				
				if (w<19)
					w++;
			}

			while(TRUE)
			{/* print value */
				if (sci)
				{/* scientific notation */
					sprintf(f, "%%+%1dE",p);
					
					break;
				}
				else
				{/* sign specific */
					if (s)
						sprintf(f, "%%+%1d.%1df",w,p);
					else
						sprintf(f, "%%%1d.%1df",w,p);
				}

				if (strlen(f)>20)	/* Auto switch to scientific notation if value too long */
					sci = TRUE;
				else
					break;
			}

			sprintf(t2,f,MSVE.tmpf[2]);
			
			k2 = strlen(t2);
			
			if (k2>m) 
				m = k2;

			sprintf(t1,f,MSVE.tmpf[0]);
			
			k1 = strlen(t1);
			
			if (k1>m) 
				m = k1;

			if (m<=12)
			{/* adjust display based on length - unabreviated */
				sprintf(LCD_DISPLAY[1],"Maximum:            ");
				sprintf(LCD_DISPLAY[2],"Minimum:            ");
			}
			else if (m<=16)
			{/* abreviated display */
				sprintf(LCD_DISPLAY[1],"Max:                ");
				sprintf(LCD_DISPLAY[2],"Min:                ");
			}
			else
			{/* blank */
				sprintf(LCD_DISPLAY[1],"                    ");
				sprintf(LCD_DISPLAY[2],"                    ");
			}

			for (i=0;i<k1;i++)
				LCD_DISPLAY[2][19-i] = t1[m-i-1];
			
			for (i=0;i<k2;i++)
				LCD_DISPLAY[1][19-i] = t2[m-i-1];
		}
		else
		{/* unbounded */
			sprintf(LCD_DISPLAY[1],"                    ");
			sprintf(LCD_DISPLAY[2],"                    ");
			
			vnl = strlen(varname);
		}

		MSVE.tmpf[1] = v->val;

		if (sci)/* value */
			sprintf(f, "%%+%1dE",p);
		else
		{
			if (s)
				sprintf(f, "%%+%1d.%1df",w,p);
			else
				sprintf(f, "%%%1d.%1df",w,p);
		}

		sprintf(t1,f,MSVE.tmpf[1]);
		
		k1 = strlen(t1);
		
		if (k1>m) 
			m = k1;

		if (w>m) 
			m = w;

		MSVE.k = m;
  		vnl    = 20 - m - 1;

		if (vnl>0)
		{
			strncpy(str, varname, vnl);
			sprintf(LCD_DISPLAY[3],"%s:                    ", str);
		}
		else
			sprintf(LCD_DISPLAY[3],"                    ");
		
		for (i=0;i<k1;i++)
			LCD_DISPLAY[3][19-i] = t1[k1-i-1];
		
		MSVE.FRESH = FALSE;
	}
	else if (strlen(MSVE.str[0])>0)
	{
		if ((MSVE.CNT%50)<25)
			strcpy(LCD_DISPLAY[0], MSVE.str[0]);
		else
			strcpy(LCD_DISPLAY[0], MSVE.str[1]);
	}

	if (MSVE.ENTER && MSVE.CURSOR_ENABLED)
	{/* save the value */
		LCD_DISPLAY[3][20] = 0;

		sscanf(LCD_DISPLAY[3]+(20-MSVE.k), "%f", &MSVE.tmpf[4]);

		if (VAR_Update(v, MSVE.tmpf[4],1,1))	/* bounds check ONLY! */
		{
			VAR_Update(v, MSVE.tmpf[4],0,1);
			
			if (!skip_save) 
				Update_Flags_Goto_Next_Menu(1,skip_adv);
		}
		else
			r = 0;
		
		MSVE.tmpf[1] = v->val;
	}
	else if (MSVE.SELECT)
	{/* move the cursor */
		if (!MSVE.CURSOR_ENABLED)
		{
			MSVE.CURSOR_ENABLED = TRUE;
			MSVE.CURSOR_ROW = 3;
			MSVE.CURSOR_COL = 19;
		}
		else
		{
			MSVE.CURSOR_COL--;

			if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == 'E') 
				MSVE.CURSOR_COL--;
			
			if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == 'e') 
				MSVE.CURSOR_COL--;
			
			if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '.') 
				MSVE.CURSOR_COL--;

			if ((MSVE.CURSOR_COL<=(19-MSVE.k)) || (MSVE.CURSOR_COL>19))
				MSVE.CURSOR_COL = 19;
			
			if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]==' ')
			{
				if(	   (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL+1] == '-') 
					|| (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL+1] == '+'))
				{
					LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL  ]	= LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL+1];
					LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL+1]	= '0';
					MSVE.CURSOR_COL++;
				}
				else
					LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL  ] = '0';
			}
		}
	}
	else if (MSVE.VALUE && MSVE.CURSOR_ENABLED)
	{/* change sign, increment value */
		if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '-')
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]  = '+';
		else if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '+')
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]  = '-';
		else
		{
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]++;
			
			if ( LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] > '9')
				 LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = '0';
			else if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] < '0')
				 LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = '0';
		}
	}

	GIEP;
}

/****************************************************************************/
/* MENU PAGE CPYRT															*/
/*                                                                          */
/* Description: Copyright information screen                                */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       none                                                        */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CPYRT(void)
{
	if ((MSVE.CNT%100)==0)
		MSVE.SUBPAGE++;
	
	switch(MSVE.SUBPAGE % 4)
	{
		case 3:
		{
			MSVE.PAGE++;
			MSVE.SUBPAGE = 0;
			MSVE.FRESH   = TRUE;
			
			break;
		}
		case 2:
		{
			MSVE.FRESH = TRUE;
			
			MENU_PAGE_INFO();
			
			break;
		}
		default:
		{
			if (MSVE.FRESH)
			{
				sprintf(LCD_DISPLAY[0],"Copyright 2011");
				sprintf(LCD_DISPLAY[1],"Phase Dynamics, Inc.");
				sprintf(LCD_DISPLAY[2],"1251 Columbia Dr.");
				sprintf(LCD_DISPLAY[3],"Richardson, TX 75081");
				MSVE.INIT = FALSE;
				MSVE.FRESH = FALSE;
			}
			break;
		}
	}
}

/****************************************************************************/
/* MENU PAGE RESTART														*/
/*                                                                          */
/* Description: Restart screen.                                             */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Calls the first line of code.                               */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_RESTART(void)
{
	if (MSVE.FRESH)
	{/* print the screen */
		MSVE.FRESH = FALSE;
		
		sprintf(LCD_DISPLAY[0],"       Restart");
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"ENTER = RESTART");
		sprintf(LCD_DISPLAY[3],"");
	}

	if (MSVE.ENTER)
	{/* select restart operation */
		c_int00();
		while(1){} /* never reaches this code, intended for crashes to not end the program */
	}
}

/****************************************************************************/
/* MENU PAGE RESTORE FACTORY DEFAULTS										*/
/*                                                                          */
/* Description: Restores factory defaults                                   */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Calls Submit_Restore_CFG_FACTORY()                          */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_RESTORE_FACTORY_DEFAULTS(void)
{
	if (MSVE.FRESH)
	{/* Display screen */
		MSVE.FRESH = FALSE;
		
		sprintf(LCD_DISPLAY[0],"  Restore Factory");
		sprintf(LCD_DISPLAY[1],"     Defaults?");
		sprintf(LCD_DISPLAY[2],"");
		
		MSVE.tmpi[0] = 0;
		MSVE.tmpi[1] = 0;
	}

	if (MSVE.tmpi[1]==0)
	{/* display value */
		switch (MSVE.tmpi[0]&0x01)
		{
			case 1:  sprintf(LCD_DISPLAY[3],"        YES"); break;
			default: sprintf(LCD_DISPLAY[3],"         NO"); break;
		}
	}

	if (MSVE.SELECT || MSVE.VALUE)	/* change value */
		MSVE.tmpi[0]++;
	
	if (MSVE.ENTER)
	{/* select a value */
		if (MSVE.tmpi[0]&0x01)
		{/* if yes - Submit_Restore_CFG_FACTORY() */
			MSVE.tmpi[1] = 1;
			
			sprintf(LCD_DISPLAY[0]," Restoring Factory");
			sprintf(LCD_DISPLAY[1],"    Defaults...");
			sprintf(LCD_DISPLAY[2],"");
			sprintf(LCD_DISPLAY[3],"");
			
			Submit_Restore_CFG_FACTORY();
		}
	}
}

/****************************************************************************/
/* MENU PAGE DIAG															*/
/*                                                                          */
/* Description: Displays diagnostic STATUS registers                        */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       apparently you are allowed to change these.                 */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_DIAG(void)
{
	int i;		/* temp byte */
	char u[8];	/* unit name */

	if (!MSVE.CURSOR_ENABLED)
	{/* cursor disabled */
		sprintf(LCD_DISPLAY[0],"    Diagnostics");
		
		i = REG_DIAG[0].val;
		
		Get_Unit(REG_ADC[ADC_Tint].class, REG_ADC[ADC_Tint].unit, u);
		sprintf(LCD_DISPLAY[1],"%04X        T:%4.0f%s",i, REG_ADC[ADC_Tint].val,u);
		
		i = REG_DIAG[1].val;
		
		sprintf(LCD_DISPLAY[2],"%04X", i);
		strcpy(LCD_DISPLAY[3],E_STRING);
	}
	else if (MSVE.FRESH)
	{/* print page */
		MSVE.FRESH = FALSE;
		
		sprintf(LCD_DISPLAY[0],"  Diagnostics Mask");
		sprintf(LCD_DISPLAY[1],"%04X", DIAGNOSTICS_MASK[0]);
		sprintf(LCD_DISPLAY[2],"%04X", DIAGNOSTICS_MASK[1]);
		sprintf(LCD_DISPLAY[3],"");
	}

	if (MSVE.ENTER)
	{/* ENTER button pressed */
		if (!MSVE.CURSOR_ENABLED)
			Clear_Diagnostics();
		else
		{
			sscanf(LCD_DISPLAY[1], "%04X", &DIAGNOSTICS_MASK[0]);
			sscanf(LCD_DISPLAY[2], "%04X", &DIAGNOSTICS_MASK[1]);
			Update_Flags_Goto_Next_Menu(1,1);
		}
	}
	else if (MSVE.SELECT)
	{/* SELECT button pressed */
		if (!MSVE.CURSOR_ENABLED)
		{/* cursor disabled */
			MSVE.FRESH = TRUE;
			MSVE.CURSOR_ENABLED = TRUE;
			MSVE.CURSOR_ROW = 2;
			MSVE.CURSOR_COL = 3;
		}
		else
		{/* move cursor digits and rows */
			MSVE.CURSOR_COL--;
			
			if (MSVE.CURSOR_COL<0)
			{/* col 0 -> 3*/
				MSVE.CURSOR_ROW--;
				MSVE.CURSOR_COL = 3;
			}
			
			/* row 1 -> 2 */
			if (MSVE.CURSOR_ROW<1)
				MSVE.CURSOR_ROW = 2;
		}
	}
	else if (MSVE.VALUE && MSVE.CURSOR_ENABLED)
	{/* VALUE button pressed - change value */
		if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '9')
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]  = 'A';
		else if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == 'F')
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = '0';
		else
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]++;
	}
}

/****************************************************************************/
/* MENU PAGE MAIN															*/
/*                                                                          */
/* Description: Displays the main page, controls the SELECT branch of the	*/
/*				main menu.                                                  */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Tech mode and Normal mode have different start screens.     */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_MAIN(void)
{
	char	u[8];		/* unit name 			*/
	float	min,max;	/* min value; max value */
	BOOL	phase;		/* display phase flag 	*/

	if (MSVE.FRESH)
	{/* start at main menu screen */
		MSVE.FRESH = FALSE;
		MSVE.tmpi[0] = 0;
	}

	if (MSVE.SELECT)	/* Select "branch" of main menu */
		MSVE.tmpi[0]++;
	else if (MSVE.MENU)
		MSVE.tmpi[0] = 0;
	
	MSVE.MENU_TRAP = TRUE;
                                     
	switch(MSVE.tmpi[0])
	{/* SELECT MENU - Main page (default) */
		case 1:
		{/* Average Watercut FC1 */
			MENU_PAGE_AVGACCUM(0);
		
			if(MSVE.tmpi[0]==1)
				break;
		}
		case 2:
		{/* Net Accumulator FC1 */
			MENU_PAGE_ACCUMN(0);
			
			if(MSVE.tmpi[0]==2) 
				break;
		}
        case 3:
		{/* Net flow FC1 */
			MENU_PAGE_NET_FLOW(0);
			
			if(MSVE.tmpi[0]==3) 
				break;
		}
        case 4:
		{/* Gross Accumulator FC1 */
			MENU_PAGE_ACCUMG(0);
			
			if(MSVE.tmpi[0]==4) 
				break;
		}
        case 5:
		{/* Flow FC1 */
			MENU_PAGE_FLOW(0);
			
			if(MSVE.tmpi[0]==5) 
				break;
		}
        case 6:
		{/* Net Accumulator FC2*/
			MENU_PAGE_ACCUMN(1);
			
			if(MSVE.tmpi[0]==6) 
				break;
		}
        case 7:
		{/* Net Flow FC2 */
			MENU_PAGE_NET_FLOW(1);
			
			if(MSVE.tmpi[0]==7) 
				break;
		}
        case 8:
		{/* Gross Accumulator FC2 */
			MENU_PAGE_ACCUMG(1);
			
			if(MSVE.tmpi[0]==8) 
				break;
		}
        case 9:
		{/* Flow FC2 */
			MENU_PAGE_FLOW(1);
			
			if(MSVE.tmpi[0]==9) 
				break;
		}
        case 10:
		{/* Net Accumulator FC3 */
			MENU_PAGE_ACCUMN(2);
			
			if(MSVE.tmpi[0]==10) 
				break;
		}
        case 11:
		{/* Net flow FC3 */
			MENU_PAGE_NET_FLOW(2);
			
			if(MSVE.tmpi[0]==11) 
				break;
		}
        case 12:
		{/* Gross Accumulator FC3 */
			MENU_PAGE_ACCUMG(2);
			
			if(MSVE.tmpi[0]==12) 
				break;
		}
        case 13:
		{/* Flow FC3 */
			MENU_PAGE_FLOW(2);
			
			if(MSVE.tmpi[0]==13) 
				break;
		}
        case 14:
		{/* Density FC1 */
			MENU_DENSITY(0);
			
			if(MSVE.tmpi[0]==14) 
				break;
		}
        case 15:
		{/* Density FC2 */
			MENU_DENSITY(1);
			
			if(MSVE.tmpi[0]==15) 
				break;
		}
        case 16:
		{/* Density FC3 */
			MENU_DENSITY(2);
			
			if(MSVE.tmpi[0]==16) 
				break;
		}
        case 17:
		{/* Density FC1 */
			MENU_PAGE_DENSITY(0);
			
			if(MSVE.tmpi[0]==17) 
				break;
		}
        case 18:
		{/* Density FC2 */
			MENU_PAGE_DENSITY(1);
			
			if(MSVE.tmpi[0]==18) 
				break;
		}
        case 19:
		{/* Density FC3 */
			MENU_PAGE_DENSITY(2);
			
			if(MSVE.tmpi[0]==19) 
				break;
		}
        default:
		{
			MSVE.MENU_TRAP = FALSE;
			MSVE.tmpi[0]   = 0;

			if (MSVE.tbl == (int*) &MENU_PAGE_TECH)
			{/* tech mode */
				if ((MSVE.CNT%40)==0)
					MSVE.SUBPAGE++;
				
				if (MSVE.SUBPAGE%2)
				{/* choose phase - high */
					if ((ANALYZER_MODE.val&0xFF)!=SUB_HIGH) 
						phase = 0; /* oil */
					else 
						phase = 1; /* water */
				}
				else
				{/* choose phase - full, ccm, !?high!? */
					if (((ANALYZER_MODE.val&0xFF)==SUB_FULL) ||((ANALYZER_MODE.val&0xFF)==SUB_CCM) || ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)) 
						phase = 1; /* water */
					else 
						phase = 0; /* oil */
				}
	
				/* LCD_DISPLAY 1 & 2 */
				if (phase)
				{/* water phase */
					Get_Unit(REG_FREQ[OSC_OIL_CALC].class, REG_FREQ[OSC_WATER_CALC].unit, u);
					sprintf(LCD_DISPLAY[1],"Freq(W):%8.3f %s",REG_FREQ[OSC_WATER_CALC].val, u);
					Get_Unit(REG_VREF[OSC_WATER_CALC].class, REG_VREF[OSC_WATER_CALC].unit, u);
					sprintf(LCD_DISPLAY[2],"Ref Pwr(W): %6.3f %s",REG_VREF[OSC_WATER_CALC].val,u);
				}
				else
				{/* oil phase */
					Get_Unit(REG_FREQ[OSC_OIL_CALC].class, REG_FREQ[OSC_OIL_CALC].unit, u);
					sprintf(LCD_DISPLAY[1],"Freq(O):%8.3f %s",REG_FREQ[OSC_OIL_CALC].val, u);
					Get_Unit(REG_VREF[OSC_OIL_CALC].class, REG_VREF[OSC_OIL_CALC].unit, u);
					sprintf(LCD_DISPLAY[2],"Ref Pwr(O): %6.3f %s",REG_VREF[OSC_OIL_CALC].val,u);
				}
	
				Get_Unit(REG_WATERCUT.class, REG_WATERCUT.unit, u);
				
				/* LCD_DISPLAY 0 */
				if (REG_EMULSION_PHASE.val==2.0)
					sprintf(LCD_DISPLAY[0],"Water Cut(%2d)  ?.? %s",(int)REG_STREAM_SELECT.val, u);
				else
				{
					min = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmin, 0, 0);
					max = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmax, 0, 0);

					/* note: why does value of 1.0 show up as switching 1.00 and 1.0 on main screen? - 
					BECAUSE printf uses formatted text %5.2 means 5 characters 2 after decimal, %5.1 is 5 characters 1 after decimal */					
					if (f_compare(&max, 20.0, 0)<=0)
						sprintf(LCD_DISPLAY[0],"Water Cut(%2d)%5.2f %s",(int)REG_STREAM_SELECT.val, REG_WATERCUT.val, u);
					else
						sprintf(LCD_DISPLAY[0],"Water Cut(%2d)%5.1f %s",(int)REG_STREAM_SELECT.val, REG_WATERCUT.val, u);
				}
			
				/* LCD_DISPLAY 3 */
				if ((DIAGNOSTICS_ERROR_CODE==0)||(MSVE.SUBPAGE%3>0))
				{
					if (REG_EMULSION_PHASE.val==0.0)
					{/* oil phase */
						Get_Unit(REG_TEMPERATURE_USER.class, REG_TEMPERATURE_USER.unit, u);
						sprintf(LCD_DISPLAY[3],"Phase: Oil   %5.1f%s",REG_TEMPERATURE_USER.val, u);
					}
					else if (REG_EMULSION_PHASE.val==1.0)
					{/* water phase */
						if (MSVE.SUBPAGE%3==1)
						{
							Get_Unit(REG_TEMPERATURE_USER.class, REG_TEMPERATURE_USER.unit, u);
							sprintf(LCD_DISPLAY[3],"Phase: Water %5.1f%s",REG_TEMPERATURE_USER.val, u);
						}
						else if ((MSVE.SUBPAGE%3==2)&&((ANALYZER_MODE.val&0xFF)!=SUB_MID))  /*Don't show salinity for Mid-cut RS*/
						{
							Get_Unit(REG_SALINITY.class, REG_SALINITY.unit, u);
							
							if (HSALT.ENABLED.val==TRUE)
								sprintf(LCD_DISPLAY[3],"HSALT:       %5.2f %s",REG_SALINITY.val, u);
							else
								sprintf(LCD_DISPLAY[3],"Salinity:    %5.2f %s",REG_SALINITY.val, u);
						}
					}
					else
					{/* phase error */
						Get_Unit(REG_TEMPERATURE_USER.class, REG_TEMPERATURE_USER.unit, u);
						sprintf(LCD_DISPLAY[3],"Phase: Error %5.1f%s",REG_TEMPERATURE_USER.val, u);
					}
				}
				else
					strcpy(LCD_DISPLAY[3], E_STRING);
			}
			else
			{/* normal mode */
				MSVE.tmpi[0] = 0;
	            
				/* LCD_DISPLAY 2 */
				if (REG_EMULSION_PHASE.val==0.0)		/* oil phase */
					sprintf(LCD_DISPLAY[2],"Oil");
				else if (REG_EMULSION_PHASE.val==1.0)	/* water phase */
					sprintf(LCD_DISPLAY[2],"Water");
				else                                    /* phase error */
					sprintf(LCD_DISPLAY[2],"Phase Logic Error");	
				
				Get_Unit(REG_WATERCUT.class, REG_WATERCUT.unit, u);
				
				/* LCD_DISPLAY 0 */
				if (REG_EMULSION_PHASE.val==2.0)
					sprintf(LCD_DISPLAY[0],"Water Cut(%2d)  ?.? %s",(int)REG_STREAM_SELECT.val, u);
				else
				{
					min = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmin, 0, 0);
					max = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmax, 0, 0);
					
					if (f_compare(&max, 20.0, 0)<=0)
						sprintf(LCD_DISPLAY[0],"Water Cut(%2d)%5.2f %s",(int)REG_STREAM_SELECT.val, REG_WATERCUT.val, u);
					else
						sprintf(LCD_DISPLAY[0],"Water Cut(%2d)%5.1f %s",(int)REG_STREAM_SELECT.val, REG_WATERCUT.val, u);
				}
	
				/* LCD_DISPLAY 1 & 3 */
				Get_Unit(REG_TEMPERATURE_USER.class, REG_TEMPERATURE_USER.unit, u);
				sprintf(LCD_DISPLAY[1],"Temperature  %5.0f%s", REG_TEMPERATURE_USER.val, u);
				sprintf(LCD_DISPLAY[3],"Phase Dynamics, Inc.");
			}

			break;
		}
	}
}

/****************************************************************************/
/* MENU PAGE STREAM SELECT													*/
/*                                                                          */
/* Description: Displays the stream select page.                            */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Edits the REG_STREAM_SELECT variable                        */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_STREAM_SELECT(void)
{
	MSVE_Data_Input("", "Stream ", 2, 0, 0, 0, &REG_STREAM_SELECT, 0, 0);
}

/*********************** Phase Hold Over on LCD RS **************************/
/****************************************************************************/
/* MENU PAGE PHASE HOLDOVER													*/
/*                                                                          */
/* Description: Displays phase holdover screen                              */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Only display for CCM or FULLCUT, Edits REG_PHASE_HOLD_CYCLES*/
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_PHASE_HOLDOVER(void)
{   	
	if (((ANALYZER_MODE.val&0xFF)!=SUB_CCM) && ((ANALYZER_MODE.val&0xFF)!=SUB_FULL))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "HoldCyc", 2, 0, 0, 0, &REG_PHASE_HOLD_CYCLES, 0, 0);  
}  
/*********************** Phase Hold Over on LCD RS **************************/

/****************************************************************************/
/* MENU PAGE NUMSAMP														*/
/*                                                                          */
/* Description: Displays number of samples(?) screen                        */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Edits REG_NUM_SAMP                                          */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_NUMSAMP(void)
{
	MSVE_Data_Input("", "NumSamp", 3, 0, 0, 0, &REG_NUM_SAMP, 0, 0);
}

/****************************************************************************/
/* MENU PAGE ALYESKA PLC DATA ADDR											*/
/*                                                                          */
/* Description: Displays Alyeska destination address screen.                */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       only show for ALYESKA mode, Edit ALYESKA.DESTINATION_ADDRESS*/
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_ALYESKA_PLC_DATA_ADDR(void)
{
	if (!ALYESKA.ENABLED)
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "Address", 5, 0, 0, 0, &ALYESKA.DESTINATION_ADDRESS, 0, 0);
}

/****************************************************************************/
/* MENU PAGE SALINITY														*/
/*                                                                          */
/* Description: Displays the Salinity screen                                */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip this for LOWCUT and MIDCUT, Edit REG_SALINITY          */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_SALINITY(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "Salt   ", 5, 2, 0, 0, &REG_SALINITY, 0, 0);
}

/**************** Add option to force phase on each stream RS ***************/ 
/****************************************************************************/
/* MENU FORCE PHASE 														*/
/*                                                                          */
/* Description: Force phase screen                                          */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       CCM and FULLCUT only, Edit: WATER_PHASE_ONLY, OIL_PHASE_ONLY*/
/*                                                                          */
/****************************************************************************/ 
void MENU_FORCE_PHASE(void)
{
	if (((ANALYZER_MODE.val&0xFF)!=SUB_CCM) && ((ANALYZER_MODE.val&0xFF)!=SUB_FULL))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		if (MSVE.FRESH)
		{/* Display screen */
			MSVE.FRESH = FALSE;
			
			sprintf(LCD_DISPLAY[0],"    Force Phase:");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"");
			
			if (OIL_PHASE_ONLY.val == TRUE)
				MSVE.tmpi[0] = 1; 
			else if (WATER_PHASE_ONLY.val == TRUE)
				MSVE.tmpi[0] = 2; 
			else 
				MSVE.tmpi[0] = 0; 
		}

		switch(MSVE.tmpi[0])
		{/* Value handler */
			case 1:		sprintf(LCD_DISPLAY[3],"        OIL");					break;
			case 2:		sprintf(LCD_DISPLAY[3],"        WATER");				break;
			default:	MSVE.tmpi[0]=0; sprintf(LCD_DISPLAY[3],"        AUTO");	break;
		}

		if (MSVE.SELECT)
		{/* SELECT - change value */
			MSVE.tmpi[0]++;
			
			if (MSVE.tmpi[0] > 2) 
				MSVE.tmpi[0] = 0;
		}
		else if (MSVE.VALUE)
		{/* VALUE - change value */
			MSVE.tmpi[0]--;
			
			if (MSVE.tmpi[0] < 0) 
				MSVE.tmpi[0] = 2;
		}

		if (MSVE.ENTER)
		{/* ENTER - accept value */
			if (MSVE.tmpi[0] == 1)  
			{   
				WATER_PHASE_ONLY.val = FALSE;
				OIL_PHASE_ONLY.val   = TRUE;	
			} 
			else if (MSVE.tmpi[0] == 2)  
			{
				OIL_PHASE_ONLY.val   = FALSE;
				WATER_PHASE_ONLY.val = TRUE;	
			} 
			else
			{
				OIL_PHASE_ONLY.val   = FALSE;
				WATER_PHASE_ONLY.val = FALSE; 		
			}   
		}
	}
}
/**************** Add option to force phase on each stream RS ***************/ 

/****************************************************************************/
/* MENU PAGE T UNIT 														*/
/*                                                                          */
/* Description: Change temperature unit screen                              */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       none                                                        */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_T_UNIT(void)
{
	if (MSVE.FRESH)
	{/* Display screen */
		MSVE.FRESH = FALSE;
		
		sprintf(LCD_DISPLAY[0],"  Temperature Unit");
		
		MSVE.tmpi[4] = REG_TEMPERATURE_EXTERNAL.class;
		
		Get_Class(MSVE.tmpi[4], MSVE.str[3]);
		sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
		
		MSVE.tmpi[3] = REG_TEMPERATURE_EXTERNAL.unit & 0xFF;
	}

	Get_Unit(MSVE.tmpi[4], MSVE.tmpi[3], MSVE.str[3]);

	sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
	sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

	if (MSVE.ENTER)
	{/* ENTER - set units */
		REG_TEMPERATURE_EXTERNAL.unit = MSVE.tmpi[3]; 
		REG_TEMPERATURE_AVG.unit 	  = MSVE.tmpi[3];     /*RS*/
		
		Set_ASCII_Temp_Unit(&REG_TEMPERATURE_EXTERNAL);   
		Set_ASCII_Temp_Unit(&REG_TEMPERATURE_AVG);    /*RS*/
		Update_Flags_Goto_Next_Menu(1,0);
	}
	else if (MSVE.SELECT)
	{/* SELECT - get unit */
		if (MSVE.tmpi[4]!= c_not_classified) 
			MSVE.tmpi[3] = Get_Next_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
	else if (MSVE.VALUE)
	{/* VALUE - get unit */
		if (MSVE.tmpi[4]!= c_not_classified) 
			MSVE.tmpi[3] = Get_Prev_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}  
	/*************LCD TEMPERATURE UNIT CONVERT C and F CONTROL IDEC -RS*********/   
	if (REG_TEMPERATURE_EXTERNAL.unit == u_temp_C)
		DIO_TEMP_C.val = TRUE;
	else
		DIO_TEMP_C.val = FALSE;	
	/*************LCD TEMPERATURE UNIT CONVERT CONTROL C and F IDEC -RS***********/
}

/****************************************************************************/
/* MENU PAGE T ADJ															*/
/*                                                                          */
/* Description: Temperature user adjust screen                              */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       REG_TEMPERATURE_USER_ADJUST                                 */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_T_ADJ(void)
{
	MSVE_Data_Input("", "TAdj   ", 6, 2, 1, 0, &REG_TEMPERATURE_USER_ADJUST, 0, 0);
}

/****************************************************************************/
/* MENU PAGE T AVG															*/
/*                                                                          */
/* Description: Average temperature screen                                  */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       ENTER resets the average                                    */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_T_AVG(void)
{   
	char	u[8];
	
	if (MSVE.FRESH)
	{
		sprintf(LCD_DISPLAY[0],"Average Temperature");
		sprintf(LCD_DISPLAY[1],"");   
		Get_Unit(REG_TEMPERATURE_AVG.class, REG_TEMPERATURE_AVG.unit, u);   
		sprintf(LCD_DISPLAY[2]," %5.1f%s",REG_TEMPERATURE_AVG.val, u); 
		sprintf(LCD_DISPLAY[3],"ENTER = RESET");
	}  
	
	if (MSVE.ENTER)
		AVG_RESET.val=TRUE;		
}

/****************************************************************************/
/* MENU PAGE CHPW WPROT														*/
/*                                                                          */
/* Description: Changes the password for write protection.                  */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       tmpv stores the password into REG_PW[2]                     */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CHPW_WPROT(void)
{
	if (MSVE.MODE_WPROT)
	{/* If locked, skip this screen */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
		
		return;
	}

	if (MSVE.FRESH)
	{/* Display screen */
		MSVE.tmpv.class 		= c_unknown;
		MSVE.tmpv.unit			= u_generic_unknown;
		MSVE.tmpv.calc_unit 	= u_generic_unknown;
		MSVE.tmpv.val 			= 0;
		MSVE.tmpv.calc_val 		= 0;
		MSVE.tmpv.bound_hi_set 	= REG_LOCK[2].bound_hi_set;
		MSVE.tmpv.bound_lo_set 	= REG_LOCK[2].bound_lo_set;
		
		sprintf (MSVE.str[3], " Change WP Password");
	}

	/* Go to password change screen */
	MSVE_Data_Input(MSVE.str[3], "CODE   ", 5, 0, 0, 0, &MSVE.tmpv, 1, 1);

	if (MSVE.ENTER)
	{/* ENTER - accept password */
		REG_PW[2] = MSVE.tmpv.val;
		
		Update_Flags_Goto_Next_Menu(1,0);
	}
}

/****************************************************************************/
/* MENU PAGE CHPW TECH MODE													*/
/*                                                                          */
/* Description: Changes the password for TECH mode                          */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       tmpv stores the password into REG_PW[3]                     */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CHPW_TECH_MODE(void)
{
	if (MSVE.MODE_WPROT)
	{/* If locked, skip this screen */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
		
		return;
	}

	if (MSVE.FRESH)
	{/* Display screen */
		MSVE.tmpv.class			= c_unknown;
		MSVE.tmpv.unit 			= u_generic_unknown;
		MSVE.tmpv.calc_unit 	= u_generic_unknown;
		MSVE.tmpv.val 			= 0;
		MSVE.tmpv.calc_val 		= 0;
		MSVE.tmpv.bound_hi_set 	= REG_LOCK[3].bound_hi_set;
		MSVE.tmpv.bound_lo_set 	= REG_LOCK[3].bound_lo_set;
		
		sprintf (MSVE.str[3], "Change TECH Password");
	}

	/* Go to change password screen */
	MSVE_Data_Input(MSVE.str[3], "CODE   ", 5, 0, 0, 0, &MSVE.tmpv, 1, 1);

	if (MSVE.ENTER)
	{/* ENTER - accept change */
		REG_PW[3] = MSVE.tmpv.val;
		
		Update_Flags_Goto_Next_Menu(1,0);
	}
}

/****************************************************************************/
/* MENU PAGE UNLOCK WPROT													*/
/*                                                                          */
/* Description: Unlocks write protection                                    */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       none                                                        */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_UNLOCK_WPROT(void)
{
	if (!MSVE.MODE_WPROT)
	{/* if locked, skip this screen */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		if (LOCKOUT)
		{/* locked */
			sprintf(LCD_DISPLAY[0],"     LOCKED OUT");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"   Please Wait...");
			sprintf(LCD_DISPLAY[3],"");
		}
		else
		{/* show screen - unlock */
			MSVE_Data_Input("", "CODE   ", 5, 0, 0, 0, &REG_LOCK[2], 1, 1);

			if (MSVE.ENTER)
			{
				MSVE.FRESH 			= TRUE;
				MSVE.CURSOR_ENABLED	= FALSE;
				MSVE.CURSOR_ROW		= 0;
				MSVE.CURSOR_COL		= 0;

				if (!DIO_LOCK[2].val)
				{
					MSVE.DIR		= 0;
					MSVE.CNT		= 0;
					MSVE.MENU_CNT	= 0;
					MSVE.SELECT_CNT	= 0;
					MSVE.VALUE_CNT	= 0;
					MSVE.PAGE		= 1;
					MSVE.SUBPAGE	= 0;
					MSVE.MENU_TRAP	= FALSE;
					MSVE.DIR_CHANGE	= FALSE;
				}
			}
		}
	}
}

/****************************************************************************/
/* MENU PAGE GOTO TECH MODE													*/
/*                                                                          */
/* Description: Unlock tech mode                                            */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       none                                                        */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_GOTO_TECH_MODE(void)
{
	if (LOCKOUT)
	{/* locked */
		sprintf(LCD_DISPLAY[0],"     LOCKED OUT");
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"   Please Wait...");
		sprintf(LCD_DISPLAY[3],"");
	}
	else
	{/* Default locked, show screen, unlock */
		if (MSVE.FRESH)
			DIO_LOCK[3].val = TRUE;
		
		MSVE_Data_Input("", "CODE   ", 5, 0, 0, 0, &REG_LOCK[3], 1, 1);

		if (MSVE.ENTER)
		{
			MSVE.FRESH 			= TRUE;
			MSVE.CURSOR_ENABLED	= FALSE;
			MSVE.CURSOR_ROW		= 0;
			MSVE.CURSOR_COL		= 0;
		}

		if (!DIO_LOCK[3].val)
		{
			MSVE.DIR			= 0;
			MSVE.CNT			= 0;
			MSVE.MENU_CNT		= 0;
			MSVE.SELECT_CNT		= 0;
			MSVE.VALUE_CNT		= 0;
			MSVE.PAGE			= 1;
			MSVE.SUBPAGE		= 0;
			MSVE.MENU_TRAP		= FALSE;
			MSVE.DIR_CHANGE		= FALSE;
		}
	}
}

/************************** Low Salt Mode RS ********************************/  
/****************************************************************************/
/* MENU PAGE LOW SALT MODE													*/
/*                                                                          */
/* Description: [En|Dis]able Low Salt Mode Screen                           */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip for LOWCUT and MIDCUT                                  */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_LOW_SALT_MODE(void)    
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		if (MSVE.FRESH)
		{/* Display page */
			MSVE.FRESH		= FALSE;
			
			sprintf(LCD_DISPLAY[0]," Low Salinity Mode");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"");
			
			MSVE.tmpi[0]	= LOW_SALT_MODE;
		}

		switch(MSVE.tmpi[0])
		{/* value handler */
			case 1:		sprintf(LCD_DISPLAY[3],"      ENABLED");					break;
			default:	MSVE.tmpi[0]=0; sprintf(LCD_DISPLAY[3],"      DISABLED");	break;
		}

		if (MSVE.SELECT)
		{/* SELECT - change value */
			MSVE.tmpi[0]++;
			
			if (MSVE.tmpi[0] > 1) 
				MSVE.tmpi[0] = 0;
		}
		else if (MSVE.VALUE)
		{/* VALUE - change value */
			MSVE.tmpi[0]--;
			
			if (MSVE.tmpi[0] < 0) 
				MSVE.tmpi[0] = 1;
		}

		if (MSVE.ENTER)
		{/* ENTER - accept changes */
			LOW_SALT_MODE = MSVE.tmpi[0];
			
			Update_Flags_Goto_Next_Menu(1,0);
		}
	}
}  

/****************************************************************************/
/* MENU PAGE LOW SALT THRESHOLD												*/
/*                                                                          */
/* Description: Edit low salt threshold screen                              */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip if LOWSALT is disabled, Edit REG_LOWSALT_THRESHOLD     */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_LOW_SALT_THRESHOLD(void)    
{	
	if (!LOW_SALT_MODE)
	{/* skip */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
		
		return;
	}

	MSVE_Data_Input("", "Threshold", 8, 3, 0, 0, &REG_LOWSALT_THRESHOLD, 0, 0);	
}
/************************** Low Salt Mode RS ********************************/  

/****************************************************************************/
/* MENU PAGE OIL ADJ														*/
/*                                                                          */
/* Description: Oil adjust screen                                           */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on HIGHCUT, Edit REG_OIL_ADJ                           */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_OIL_ADJ(void)
{
	float min,max;	/* min value; max value */
	
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{/* skip */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		min = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmin, 0, 0);
		max = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmin, 0, 0);
		max = fabs(max-min);
		
		if (f_compare(&max, 20.0, 0)>0)
			MSVE_Data_Input("", "OAdj   ", 6, 1, 1, 0, &REG_OIL_ADJ, 0, 0);
		else
			MSVE_Data_Input("", "OAdj   ", 7, 2, 1, 0, &REG_OIL_ADJ, 0, 0);
	}
}

/****************************************************************************/
/* MENU PAGE WATER ADJ														*/
/*                                                                          */
/* Description: Water adjust screen                                         */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on LOWCUT and MIDCUT                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_WATER_ADJ(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "WAdj   ", 6, 1, 1, 0, &REG_WATER_ADJ, 0, 0);
}

/****************************************************************************/
/* MENU PAGE ALARM LO														*/
/*                                                                          */
/* Description: Alarm Lo screen                                             */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Edits REG_WATERCUT_ALARM_LO                                 */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_ALARM_LO(void)
{
	MSVE_Data_Input("", "WLo  ", 6, 1, 1, 0, &REG_WATERCUT_ALARM_LO, 0, 0);
}

/****************************************************************************/
/* MENU PAGE ALARM HI														*/
/*                                                                          */
/* Description: Alarm Hi Screen                                             */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Edits REG_WATERCUT_ALARM_HI                                 */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_ALARM_HI(void)
{
	MSVE_Data_Input("", "WHi  ", 6, 1, 1, 0, &REG_WATERCUT_ALARM_HI, 0, 0);
}

/****************************************************************************/
/* MENU PAGE WATER IDX														*/
/*                                                                          */
/* Description: Water index screen                                          */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on LOWCUT and MIDCUT, Edits REG_WATER_INDEX            */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_WATER_IDX(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "Widx   ", 9, 3, 1, 0, &REG_WATER_INDEX, 0, 0);
}

/****************************************************************************/
/* MENU PAGE WATER LO														*/
/*                                                                          */
/* Description: Water Frequency Lo screen                                   */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on LOWCUT and MIDCUT, Edits REG_FREQ_WATER_LO          */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_WATER_LO(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "WFreqLo", 8, 3, 0, 0, &REG_FREQ_WATER_LO, 0, 0);
}

/****************************************************************************/
/* MENU PAGE WATER HI														*/
/*                                                                          */
/* Description: Water Frequency Hi screen                                   */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on LOWCUT and MIDCUT, Edits REG_FREQ_WATER_HI          */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_WATER_HI(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "WFreqHi", 8, 3, 0, 0, &REG_FREQ_WATER_HI, 0, 0);
}

/****************************************************************************/
/* MENU PAGE OIL IDX														*/
/*                                                                          */
/* Description: Oil index screen                                            */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on HIGHCUT, Edits REG_OIL_INDEX                        */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_OIL_IDX(void)
{
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "Oidx   ", 9, 3, 1, 0, &REG_OIL_INDEX, 0, 0);
}

/****************************************************************************/
/* MENU PAGE OIL LO															*/
/*                                                                          */
/* Description: Oil Frequency Lo screen                                     */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on HIGHCUT, Edits REG_FREQ_OIL_LO                      */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_OIL_LO(void)
{
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		MSVE_Data_Input("", "OFreqLo", 8, 3, 0, 0, &REG_FREQ_OIL_LO, 0, 0);
	}
}

/****************************************************************************/
/* MENU PAGE OIL HI															*/
/*                                                                          */
/* Description: Oil Frequency Hi screen                                     */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip on HIGHCUT, Edits REG_FREQ_OIL_HI                      */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_OIL_HI(void)
{
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "OFreqHi", 8, 3, 0, 0, &REG_FREQ_OIL_HI, 0, 0);
}

/****************************************************************************/
/* MENU PAGE OIL P1															*/
/*                                                                          */
/* Description: Oil P1 Page                                                 */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Edits OIL_P1                                                */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_OIL_P1(void)
{
	MSVE_Data_Input("", "OP1", 10, 4, 1, 0, &OIL_P1, 0, 0);
}

/****************************************************************************/
/* MENU PAGE OIL P0															*/
/*                                                                          */
/* Description: Oil P0 Page                                                 */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Edits Oil_P0                                                */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_OIL_P0(void)
{
	MSVE_Data_Input("", "OP0", 10, 4, 1, 0, &OIL_P0, 0, 0);
}

/****************************************************************************/
/* MENU PAGE CAPTURE OIL													*/
/*                                                                          */
/* Description: Controls the capture oil screen.  Calls Capture_Watercut_Oil*/
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skip HIGHCUT			                                    */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CAPTURE_OIL(void)
{
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{/* HIGHCUT skip */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		if (REG_EMULSION_PHASE.val!=0.0)
		{/* water phase */
			sprintf(LCD_DISPLAY[0],"Capture (Oil Phase)");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"");
			sprintf(LCD_DISPLAY[3],"WRONG EMULSION PHASE");
		}
		else
		{/* oil phase */
			if (MSVE.FRESH)
			{
				MSVE.tmpi[0] = 0;
				MSVE.FRESH   = FALSE;
				
				sprintf(LCD_DISPLAY[0],"Capture (Oil Phase)");      
				sprintf(LCD_DISPLAY[1],"");        					/*new salt cal routine manual stop RS*/
				sprintf(LCD_DISPLAY[2],"ENTER TO START");        	/*new salt cal routine manual stop RS*/
				sprintf(LCD_DISPLAY[3],"%02x:%02x       %02x/%02x/%02x",Cap_Oil.Time_HH,Cap_Oil.Time_MM,Cap_Oil.Time_MONTH,Cap_Oil.Time_DAY,Cap_Oil.Time_YEAR);
			}
	        
	        /*********new salt cal routine manual stop RS**********/
			if (MSVE.ENTER)
				MSVE.tmpi[0]++;  
			
			if (MSVE.tmpi[0]==1)
            {/* Start oil capture */
            	MSVE.tmpi[0]    = 2;	/* oil capture running */
				DIO_CAP_OIL.val = 0;	/* erase */
				
				Capture_Watercut_Oil(0);
				
				DIO_CAP_OIL.val = 1;	/* capture */
				
				Capture_Watercut_Oil(0);    
				sprintf(LCD_DISPLAY[2],"ENTER TO STOP");        /*new salt cal routine manual stop RS*/
				sprintf(LCD_DISPLAY[3],"Sampling...");
			}   						
            
            if (MSVE.tmpi[0]==3)
            {/* stop oil capture */
            	CAP_OIL_STOP.val = TRUE;
            	MSVE.tmpi[0] = 4;	
            }
            /*********new salt cal routine manual stop RS**********/
	
			if ((DIO_CAP_OIL.val == 0)&& (MSVE.tmpi[0]==4))		/*new salt cal routine manual stop RS*/    
			{/* save after sampling */
				sprintf(LCD_DISPLAY[3],"%02x:%02x       %02x/%02x/%02x",Cap_Oil.Time_HH,Cap_Oil.Time_MM,Cap_Oil.Time_MONTH,Cap_Oil.Time_DAY,Cap_Oil.Time_YEAR);
				Update_Flags_Goto_Next_Menu(1,0);       /*new salt cal routine manual stop, auto go to next screen RS*/
			}
		}
	}
}

/****************************************************************************/
/* MENU PAGE CAPTURE WATER													*/
/*                                                                          */
/* Description: Controls the capture watercut screen.                       */
/*                                                                          */
/* Arguments:   void                                                        */
/*                                                                          */
/* Returns:     void                                                        */
/*                                                                          */
/* Notes:       Skips LOWCUT and MIDCUT; calls Capture_Watercut_Water       */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CAPTURE_WATER(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{/* skip LOWCUT and MIDCUT */
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
	{
		if (REG_EMULSION_PHASE.val!=1.0)
		{/* oil phase */
			sprintf(LCD_DISPLAY[0],"Capture(Water Phase)");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"");
			sprintf(LCD_DISPLAY[3],"WRONG EMULSION PHASE");
		}
		else
		{/* water phase */
			if (MSVE.FRESH)
			{
				MSVE.tmpi[0] = 0;
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"Capture(Water Phase)");       
				sprintf(LCD_DISPLAY[1],"");                      /*new salt cal routine manual stop RS*/
				sprintf(LCD_DISPLAY[2],"ENTER TO START");        /*new salt cal routine manual stop RS*/
				sprintf(LCD_DISPLAY[3],"%02x:%02x       %02x/%02x/%02x",Cap_Water.Time_HH,Cap_Water.Time_MM,Cap_Water.Time_MONTH,Cap_Water.Time_DAY,Cap_Water.Time_YEAR);
			}

            /******new salt cal routine manual stop RS**********/ 
			if (MSVE.ENTER)
				MSVE.tmpi[0]++;   
			
			if (MSVE.tmpi[0]==1)
            {/* Start capture */
            	MSVE.tmpi[0]      = 2;
            	DIO_CAP_WATER.val = 0;		/* erase */
				
				Capture_Watercut_Water(0);
				
				DIO_CAP_WATER.val = 1;		/* capture */
				
				Capture_Watercut_Water(0);    
				sprintf(LCD_DISPLAY[2],"ENTER TO STOP");        /*new salt cal routine manual stop RS*/            
				sprintf(LCD_DISPLAY[3],"Sampling...");	
            }
            
			if (MSVE.tmpi[0]==3)
            {/* stop capture */
            	CAP_WATER_STOP.val = TRUE;
            	MSVE.tmpi[0] = 4;	
            }
            /*********new salt cal routine manual stop RS**********/
            
			if ((DIO_CAP_WATER.val == 0)&& (MSVE.tmpi[0]==4)) /*new salt cal routine manual stop RS*/
			{/* save after sampling */
				sprintf(LCD_DISPLAY[3],"%02x:%02x       %02x/%02x/%02x",Cap_Water.Time_HH,Cap_Water.Time_MM,Cap_Water.Time_MONTH,Cap_Water.Time_DAY,Cap_Water.Time_YEAR);
				Update_Flags_Goto_Next_Menu(1,0);       /*new salt cal routine manual stop, auto go to next screen RS*/
			}
		}
	}
}

/****************************************************************************/
/* MENU PAGE CAL OIL														*/
/*                                                                          */
/* Description: Oil Calibration page                                        */
/*                                                                          */
/* Arguments: void                                                          */
/*                                                                          */
/* Returns:   void                                                          */
/*                                                                          */
/* Notes:     Skips HIGHCUT; Edits REG_CAL_OIL                              */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CAL_OIL(void)
{
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{
		if (!MSVE.DIR) 
			MSVE.PAGE++;
		else 
			MSVE.PAGE--;
	}
	else
		MSVE_Data_Input("", "Water", 6, 2, 0, 0, &REG_CAL_OIL, 0, 0);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_CAL_WATER(void)
{
	if (((ANALYZER_MODE.val&0xFF)==SUB_LOW) || ((ANALYZER_MODE.val&0xFF)==SUB_MID))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
	}
	else
	{
		MSVE_Data_Input("", "Water", 6, 2, 0, 0, &REG_CAL_WATER, 0, 0);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_WATERCUT_RAW(void)
{
	char u[8];
	float t;
	t = REG_WATERCUT.base_val;
	Get_Unit(REG_WATERCUT.class, REG_WATERCUT.unit, u);
	sprintf(LCD_DISPLAY[0],"WC :%8.4f %s",t, u);
	sprintf(LCD_DISPLAY[1],"RWC:%8.4f %s",REG_WATERCUT_RAW, u);
	Get_Unit(REG_TEMPERATURE_EXTERNAL.class, REG_TEMPERATURE_EXTERNAL.unit, u);
	sprintf(LCD_DISPLAY[2],"T  :%8.2f %s",REG_TEMPERATURE_EXTERNAL.val,u);
	Get_Unit(REG_VREF[OSC_OIL_CALC].class, REG_VREF[OSC_OIL_CALC].unit, u);
	sprintf(LCD_DISPLAY[3],"RPO:%8.3f %s",REG_VREF[OSC_OIL_CALC].val, u);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_AVGACCUM(int n)
{
	char u[8];
	long double t;
	
	sprintf(LCD_DISPLAY[0]," Avg Watercut %% #%d", n+1);
	
	Get_Unit(FC[n].NET_TOTAL.class, FC[n].NET_TOTAL.unit, u);
	t = FC[n].AVG_NET_TOTAL.calc_val;
	sprintf(LCD_DISPLAY[1],"Avg Net:  %9.2d%%", t);
	
	Get_Unit(FC[n].GROSS_TOTAL.class, FC[n].GROSS_TOTAL.unit, u);
	t = FC[n].AVG_GROSS_TOTAL.calc_val;
	sprintf(LCD_DISPLAY[2],"Avg Gross:%9.2d%%", t);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_ACCUMN(int n)
{
	char u[8];
	unsigned int t;

	if (!FC[n].enable_NET)
	{
		MSVE.tmpi[0]++;
		return;
	}

	sprintf(LCD_DISPLAY[0]," Net Accumulator #%d", n+1);

	Get_Unit(FC[n].NET_TOTAL.class, FC[n].NET_TOTAL.unit, u);
	t = FC[n].NET_TOTAL.calc_val;
	sprintf(LCD_DISPLAY[1],"Total:%9d%s", t,u);

	Get_Unit(FC[n].NET_WATER.class, FC[n].NET_WATER.unit, u);
	t = FC[n].NET_WATER.calc_val;
	sprintf(LCD_DISPLAY[2],"Water:%9d%s", t,u);

	Get_Unit(FC[n].NET_OIL.class, FC[n].NET_OIL.unit, u);
	t = FC[n].NET_OIL.calc_val;
	sprintf(LCD_DISPLAY[3],"Oil  :%9d%s", t,u);

	if (MSVE.ENTER)
	{
		Clear_Accumulator(n);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_ACCUMG(int n)
{
	char u[8];
	unsigned int t;

	if (!FC[n].enable_GROSS)
	{
		MSVE.tmpi[0]++;
		return;
	}

	sprintf(LCD_DISPLAY[0],"Gross Accumulator #%d", n+1);

	Get_Unit(FC[n].GROSS_TOTAL.class, FC[n].GROSS_TOTAL.unit, u);
	t = FC[n].GROSS_TOTAL.calc_val;
	sprintf(LCD_DISPLAY[1],"Total:%9d%s", t,u);

	Get_Unit(FC[n].GROSS_WATER.class, FC[n].GROSS_WATER.unit, u);
	t = FC[n].GROSS_WATER.calc_val;
	sprintf(LCD_DISPLAY[2],"Water:%9d%s", t,u);

	Get_Unit(FC[n].GROSS_OIL.class, FC[n].GROSS_OIL.unit, u);
	t = FC[n].GROSS_OIL.calc_val;
	sprintf(LCD_DISPLAY[3],"Oil  :%9d%s", t,u);

	if (MSVE.ENTER)
	{
		Clear_Accumulator(n);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_FLOW(int n)
{
	char u[8];
	float t;

	if (!FC[n].enable_FLOW)
	{
		MSVE.tmpi[0]++;
		return;
	}

	sprintf(LCD_DISPLAY[0],"       Flow #%d", n+1);

	Get_Unit(FC[n].FLOW_TOTAL.class, FC[n].FLOW_TOTAL.unit, u);
	t = FC[n].FLOW_TOTAL.calc_val;
	sprintf(LCD_DISPLAY[1],"Total:%8.1f%s", t,u);

	Get_Unit(FC[n].FLOW_WATER.class, FC[n].FLOW_WATER.unit, u);
	t = FC[n].FLOW_WATER.calc_val;
	sprintf(LCD_DISPLAY[2],"Water:%8.1f%s", t,u);

	Get_Unit(FC[n].FLOW_OIL.class, FC[n].FLOW_OIL.unit, u);
	t = FC[n].FLOW_OIL.calc_val;
	sprintf(LCD_DISPLAY[3],"Oil  :%8.1f%s", t,u);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_NET_FLOW(int n)
{
	char u[8];
	float t;

	if (!FC[n].enable_NET)
	{
		MSVE.tmpi[0]++;
		return;
	}

	sprintf(LCD_DISPLAY[0],"    Net Flow #%d", n+1);

	Get_Unit(FC[n].NET_FLOW_TOTAL.class, FC[n].NET_FLOW_TOTAL.unit, u);
	t = FC[n].NET_FLOW_TOTAL.calc_val;
	sprintf(LCD_DISPLAY[1],"Total:%8.1f%s", t,u);

	Get_Unit(FC[n].NET_FLOW_WATER.class, FC[n].NET_FLOW_WATER.unit, u);
	t = FC[n].NET_FLOW_WATER.calc_val;
	sprintf(LCD_DISPLAY[2],"Water:%8.1f%s", t,u);

	Get_Unit(FC[n].NET_FLOW_OIL.class, FC[n].NET_FLOW_OIL.unit, u);
	t = FC[n].NET_FLOW_OIL.calc_val;
	sprintf(LCD_DISPLAY[3],"Oil  :%8.1f%s", t,u);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DENSITY(int n)
{
	char u[8];
	char u1[8];
	float t, min, max;
	int a;

	if (!FC[n].enable_DENSITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	sprintf(LCD_DISPLAY[0],"    FC#%d Summary", n+1);

	Get_Unit(FC[n].watercut.class, FC[n].watercut.unit, u1);
	Get_Unit(FC[n].T.class, FC[n].T.unit, u);
	t = FC[n].T.val;

	if (REG_EMULSION_PHASE.val==2.0)
	{
		sprintf(LCD_DISPLAY[1],"WC: ?.?  %s T:%5.1f%s", u1, t, u);
	}
	else
	{
		min = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmin, 0, 0);
		max = VAR_Get_Unit_Param(&REG_WATERCUT, reg_direct_bmax, 0, 0);
		if (f_compare(&max, 20.0, 0)<=0)
		{
			sprintf(LCD_DISPLAY[1],"WC:%6.2f%s T:%5.1f%s", FC[n].watercut.val, u1, t, u);
		}
		else
		{
			sprintf(LCD_DISPLAY[1],"WC:%6.1f%s T:%5.1f%s", FC[n].watercut.val, u1, t, u);
		}
	}

	Get_Unit(FC[n].density.class, FC[n].density.unit, u);
	t = FC[n].density.val;
	a = FC[n].density.unit;
	if ((a==u_mpv_sg_60F) || (a==u_mpv_sg_15C) || (a==u_mpv_sg) || (a==u_mpv_g_cc))	sprintf(LCD_DISPLAY[2],"Density:%5.4f%s", t, u);
	else sprintf(LCD_DISPLAY[2],"Density:%5.1f%s", t, u);

	Get_Unit(FC[n].FLOW_TOTAL.class, FC[n].FLOW_TOTAL.unit, u);
	t = FC[n].FLOW_TOTAL.val;
	sprintf(LCD_DISPLAY[3],"Flow   :%5.1f%s", t, u);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_DENSITY(int n)
{
	char u[8];
	float t;
	int a;

	if (!FC[n].enable_DENSITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	sprintf(LCD_DISPLAY[0],"     DENSITY #%d", n+1);
	Get_Unit(FC[n].density.class, FC[n].density.unit, u);
	t = FC[n].density.val;
	a = FC[n].density.unit;
	if ((a==u_mpv_sg_60F) || (a==u_mpv_sg_15C) || (a==u_mpv_sg) || (a==u_mpv_g_cc))	sprintf(LCD_DISPLAY[1],"Density:%5.4f%s", t, u);
	else sprintf(LCD_DISPLAY[1],"Density:%5.1f%s", t, u);

    if (Density_Correction_Mode.val==6)
    {
		sprintf(LCD_DISPLAY[2],"");
	}
	else
    if ((Density_Correction_Mode.val==3)||(Density_Correction_Mode.val==4)||(Density_Correction_Mode.val==5))
    {
		Get_Unit(FC[n].density.class, COR[n].u_density_corrected, u);
		sprintf(LCD_DISPLAY[2],"COR STD:%5.1f%s", COR[n].density_corrected,u);
	}
	else
	{
		Get_Unit(Density_Cal.class, Density_Cal.calc_unit, u);
		/*sprintf(LCD_DISPLAY[2],"COR    :%5.1f%s", COR[n].density_PDI_corrected,u);  */
		sprintf(LCD_DISPLAY[2],"COR    :%5.1f%s", FC[n].density_PDI_corrected,u);   /*Corrected Density on 4-line LCD RS*/
	}

	Get_Unit(FC[n].T.class, FC[n].T.unit, u);
	t = FC[n].T.val;
	sprintf(LCD_DISPLAY[3],"Temp   :%5.1f%s", t, u);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_TIME_DATE(void)
{
	unsigned char YEAR,MONTH,DAY,HH,MM,SS;
	int r;

	if (!RTC_PRESENT)
	{
		if (MSVE.FRESH)
		{
			sprintf(LCD_DISPLAY[0],"    Time & Date");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2]," Clock not present.");
			sprintf(LCD_DISPLAY[3],"");
			MSVE.FRESH = FALSE;
		}
		return;
	}

	if (!MSVE.CURSOR_ENABLED)
	{
		HH				= RTC[4] & 0x3F;
		MM				= RTC[3] & 0x7F;
		SS				= RTC[2] & 0x7F;
		MONTH			= RTC[7] & 0x1F;
		DAY				= RTC[6] & 0x3F;
		YEAR			= RTC[8] & 0xFF;

		sprintf(LCD_DISPLAY[0],"    Time & Date");
		sprintf(LCD_DISPLAY[3],"");
		sprintf(LCD_DISPLAY[1],"      %02x:%02x:%02x",HH,MM,SS);
		sprintf(LCD_DISPLAY[2],"      %02x/%02x/%02x",MONTH,DAY,YEAR);
	}
	else
	if (MSVE.FRESH)
	{
		sprintf(LCD_DISPLAY[0],"  Set Time & Date");
		sprintf(LCD_DISPLAY[3],"");
		MSVE.FRESH = FALSE;
	}

	if (MSVE.ENTER && MSVE.CURSOR_ENABLED)
	{
		sscanf(LCD_DISPLAY[1], "      %02x:%02x:%02x", &HH, &MM, &SS);
		sscanf(LCD_DISPLAY[2], "      %02x/%02x/%02x", &MONTH, &DAY, &YEAR);

		_GIEP;
		r = 0;
		while(1)
		{
			if (HH>0x23) break;
			if (MM>0x59) break;
			if (SS>0x59) break;
			if (MONTH>0x12) break;
			if (MONTH<0x01) break;
			if (DAY>0x31) break;
			if (DAY<0x01) break;
			if (YEAR>0x99) break;

			if (!Write_DS1340(2, 1, &HH)) break;
			if (!Write_DS1340(1, 1, &MM)) break;
			if (!Write_DS1340(0, 1, &SS)) break;
			if (!Write_DS1340(5, 1, &MONTH)) break;
			if (!Write_DS1340(4, 1, &DAY)) break;
			if (!Write_DS1340(6, 1, &YEAR)) break;

			RTC[1]  = 0x00;	/* reset the OSF */
			DIAGNOSTICS[1] &= 0xFFFFFFFF ^ ERROR2_TIME_RESET;
			if (!Write_DS1340(8, 2, &RTC[0])) break;

			r = 1;

			IDEC_SA[7].val &= 0x7FFF;
			Timer_Create(&TMR_REFRESH_TIME, 1.0, 1, (int*)Refresh_IDEC_Time, 1);
			Timer_Insert(&TMR_REFRESH_TIME,0,TMR_action_replace);
			break;
		}
		if (r==0) DIAGNOSTICS[1] |= ERROR2_TIME_RESET;
		GIEP;

		MSVE.CURSOR_ENABLED = FALSE;
	}
	else
	if (MSVE.SELECT)
	{
		if (!MSVE.CURSOR_ENABLED)
		{
			MSVE.FRESH = TRUE;
			MSVE.CURSOR_ENABLED = TRUE;
			MSVE.CURSOR_ROW = 2;
			MSVE.CURSOR_COL = 13;
		}
		else
		{
			MSVE.CURSOR_COL--;
			if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '/') MSVE.CURSOR_COL--;
			if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == ':') MSVE.CURSOR_COL--;

			if (MSVE.CURSOR_COL<6)
			{
				MSVE.CURSOR_ROW--;
				MSVE.CURSOR_COL = 13;
			}
			if (MSVE.CURSOR_ROW<1)
			{
				MSVE.CURSOR_ROW = 2;
			}
		}
	}
	else
	if (MSVE.VALUE && MSVE.CURSOR_ENABLED)
	{
		if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '9')
		{
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = '0';
		}
		else
		{
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]++;
		}
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_INFO(void)
{
	int i;

	if ((MSVE.FRESH)&&(!MSVE.CURSOR_ENABLED))
	{
		sprintf(LCD_DISPLAY[0],"Serial Number:%06d", SN_PIPE);
		for (i=0;i<4;i++)
		{
			LCD_DISPLAY[1][2*i+0] = STR_HART_Tag[i]>>8;
			LCD_DISPLAY[1][2*i+1] = STR_HART_Tag[i];
		}
		LCD_DISPLAY[1][2*i+0] = 0;

		for (i=0;i<10;i++)
		{
			LCD_DISPLAY[2][2*i+0] = STR_Analyzer_Info[i]>>8;
			LCD_DISPLAY[2][2*i+1] = STR_Analyzer_Info[i];
		}
		LCD_DISPLAY[2][2*i+0] = 0;

		sprintf(LCD_DISPLAY[3],"Phase Dynamics, Inc.");
		MSVE.FRESH = FALSE;
	}
	else
	if (MSVE.FRESH)
	{
		MSVE.tmpi[0] = 0;
		sprintf(LCD_DISPLAY[0],"      Edit Tag");
		for (i=0;i<4;i++)
		{
			LCD_DISPLAY[1][2*i+0] = STR_HART_Tag[i]>>8;
			LCD_DISPLAY[1][2*i+1] = STR_HART_Tag[i];
		}
		LCD_DISPLAY[1][2*i+0] = 0;

		sprintf(LCD_DISPLAY[2],"");
		sprintf(LCD_DISPLAY[3],"");

		MSVE.FRESH = FALSE;
	}

	if (MSVE.ENTER && MSVE.CURSOR_ENABLED)
	{
		for (i=0;i<4;i++)
		{
			STR_HART_Tag[i] = ((LCD_DISPLAY[1][2*i+0]&0xFF)<<8) | (LCD_DISPLAY[1][2*i+1]&0xFF);
		}

		Update_Flags_Goto_Next_Menu(1,1);
		MSVE.FRESH = TRUE;
	}
	else
	if (MSVE.SELECT)
	{
		if (!MSVE.CURSOR_ENABLED)
		{
			MSVE.FRESH = TRUE;
			MSVE.CURSOR_ENABLED = TRUE;
			MSVE.CURSOR_ROW = 1;
			MSVE.CURSOR_COL = 0;
		}
		else
		{
			MSVE.CURSOR_COL++;

			if (MSVE.CURSOR_COL>7)
			{
				MSVE.CURSOR_COL = 0;
			}
		}
	}
	else
	if (MSVE.VALUE && MSVE.CURSOR_ENABLED)
	{
		if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == 127)
		{
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = ' ';
		}
		else
		{
			LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]++;
		}
	}
	else
	if ((MSVE.VALUE_CNT>40) && (MSVE.CURSOR_ENABLED))
	{
		MSVE.VALUE_CNT=0;
		MSVE.tmpi[0]++;
		switch(MSVE.tmpi[0]%4)
		{
			case 0: LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]=' '; break;
			case 1: LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]='0'; break;
			case 2: LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]='A'; break;
			case 3: LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]='a'; break;
		}
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_PAGE_PORT_CFG(void)
{
	int i;

	if (MSVE.FRESH)
	{
		for(i=0;i<UART_MAX;i++)  // find max UART?
		{
			if (PORT[i].PRESENT) break;
		}

		if (i==UART_MAX)
		{
			if (!MSVE.DIR) MSVE.PAGE++;
			else MSVE.PAGE--;
			return;
		}

		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   Configure Comm");
		sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = 0;
		MSVE.tmpi[1] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[4] = 0;
	}

	if (MSVE.tmpi[2])
	{
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}

	switch(MSVE.tmpi[1])
	{
		case 2:
		{/* RS485 Baud Rate */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				MSVE.tmpi[3] = PORTCFG[MSVE.tmpi[0]].Baud_Rate.val;
				sprintf(LCD_DISPLAY[0],"    %s", PORTCFG[MSVE.tmpi[0]].Baud_Rate.name);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
			}

			sprintf(LCD_DISPLAY[3],"       %6d", MSVE.tmpi[3]);

			if (MSVE.SELECT)
			{
				if (MSVE.tmpi[3]<300)		MSVE.tmpi[3] = 300;
				else
				if (MSVE.tmpi[3]<1200)		MSVE.tmpi[3] = 1200;
				else
				if (MSVE.tmpi[3]<2400)		MSVE.tmpi[3] = 2400;
				else
				if (MSVE.tmpi[3]<4800)		MSVE.tmpi[3] = 4800;
				else
				if (MSVE.tmpi[3]<9600)		MSVE.tmpi[3] = 9600;
				else
				if (MSVE.tmpi[3]<19200)		MSVE.tmpi[3] = 19200;
				else
				if (MSVE.tmpi[3]<38400)		MSVE.tmpi[3] = 38400;
				else
				if (MSVE.tmpi[3]<57600)		MSVE.tmpi[3] = 57600;
				else
				if (MSVE.tmpi[3]<115200)	MSVE.tmpi[3] = 115200;
				else						MSVE.tmpi[3] = 300;
			}
			else
			if (MSVE.VALUE)
			{
				if (MSVE.tmpi[3]>115200)	MSVE.tmpi[3] = 115200;
				else
				if (MSVE.tmpi[3]>57600)		MSVE.tmpi[3] = 57600;
				else
				if (MSVE.tmpi[3]>38400)		MSVE.tmpi[3] = 38400;
				else
				if (MSVE.tmpi[3]>19200)		MSVE.tmpi[3] = 19200;
				else
				if (MSVE.tmpi[3]>9600)		MSVE.tmpi[3] = 9600;
				else
				if (MSVE.tmpi[3]>4800)		MSVE.tmpi[3] = 4800;
				else
				if (MSVE.tmpi[3]>2400)		MSVE.tmpi[3] = 2400;
				else
				if (MSVE.tmpi[3]>1200)		MSVE.tmpi[3] = 1200;
				else
				if (MSVE.tmpi[3]>300)		MSVE.tmpi[3] = 300;
				else						MSVE.tmpi[3] = 115200;
			}
			else
			if (MSVE.ENTER)
			{
				MSVE.tmpf[0] = MSVE.tmpi[3];

				if (VAR_Update(&PORTCFG[MSVE.tmpi[0]].Baud_Rate, MSVE.tmpf[0],1,1))	/* bounds check ONLY! */
				{
					VAR_Update(&PORTCFG[MSVE.tmpi[0]].Baud_Rate, MSVE.tmpf[0],0,1);
					Update_Flags_Goto_Next_Menu(1,1);
				}
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 3:
		{/* RS485 Prefix */
			MSVE_Data_Input("", "PREFIX ", 5, 1, 0, 0, &PORTCFG[MSVE.tmpi[0]].PREFIX, 0, 1);

			if (MSVE.MENU||MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 4:
		{/* RS485 Suffix */
			MSVE_Data_Input("", "SUFFIX ", 5, 1, 0, 0, &PORTCFG[MSVE.tmpi[0]].SUFFIX, 0, 1);

			if (MSVE.MENU||MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 5:
		{/* RS485 EOT */
			MSVE_Data_Input("", "EOT    ", 5, 1, 0, 0, &PORTCFG[MSVE.tmpi[0]].EOT_Delay, 0, 1);

			if (MSVE.MENU||MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 6:
		{/* RS485 WDOG */
			MSVE_Data_Input("", "WDOG   ", 5, 1, 0, 0, &PORTCFG[MSVE.tmpi[0]].NETWDOG, 0, 1);

			if (MSVE.MENU||MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 7:
		{/* RS485 PARITY */
    		if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				switch (PORTCFG[MSVE.tmpi[0]].Parity>>8)
				{
					case 'O':
					{
						MSVE.tmpi[3] = 1;
						break;
					}
					
					case 'E':
					{
						MSVE.tmpi[3] = 2;
						break;
					}
					
					case '1':
					case 'M':
					{
						MSVE.tmpi[3] = 3;
						break;
					}
					
					case '0':
					case 'S':
					{
						MSVE.tmpi[3] = 4;
						break;
					}
					
					case 'N':
					default:
					{
						MSVE.tmpi[3] = 0;
						break;
					}
				}

				sprintf(LCD_DISPLAY[0],"     C%d Parity", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
			}

			switch (MSVE.tmpi[3])
			{
				case 1:
				{
					sprintf(LCD_DISPLAY[3],"        ODD");
					break;
				}
				
				case 2:
				{
					sprintf(LCD_DISPLAY[3],"        EVEN");
					break;
				}
				
				case 3:
				{
					sprintf(LCD_DISPLAY[3],"       MARK/1");
					break;
				}
				
				case 4:
				{
					sprintf(LCD_DISPLAY[3],"      SPACE/0");
					break;
				}
				
				case 0:
				default:
				{
					sprintf(LCD_DISPLAY[3],"        NONE");
					break;
				}
			}
			if (MSVE.SELECT)
			{
				MSVE.tmpi[3]++;
				if (MSVE.tmpi[3]>4) MSVE.tmpi[3] = 0;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[3]--;
				if (MSVE.tmpi[3]<0) MSVE.tmpi[3] = 4;
			}
			else
			if (MSVE.ENTER)
			{
				switch (MSVE.tmpi[3])
				{
					case 1:
					{
						PORTCFG[MSVE.tmpi[0]].Parity = 'O'<<8;
						break;
					}
					
					case 2:
					{
						PORTCFG[MSVE.tmpi[0]].Parity = 'E'<<8;
						break;
					}
					
					case 3:
					{
						PORTCFG[MSVE.tmpi[0]].Parity = 'M'<<8;
						break;
					}
					
					case 4:
					{
						PORTCFG[MSVE.tmpi[0]].Parity = 'S'<<8;
						break;
					}
					
					case 0:
					default:
					{
						PORTCFG[MSVE.tmpi[0]].Parity = 'N'<<8;
						break;
					}
				}

				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 8:
		{/* RS485 MASTER TRANSMIT RETRY */
			MSVE_Data_Input("", "RETRY  ", 5, 1, 0, 0, &PORTCFG[MSVE.tmpi[0]].Retry_Time, 0, 1);

			if (MSVE.MENU||MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

/* todo: insert poll_time, master/slave select, etc */

		case 9:
		{/* RS485 Statistics */
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0],"   C%d Statistics", MSVE.tmpi[0]+1);
			sprintf(LCD_DISPLAY[1],"Errors :  %10d", PORT[MSVE.tmpi[0]].ERROR_COUNT);
			sprintf(LCD_DISPLAY[2],"WDOG   :  %10d", PORT[MSVE.tmpi[0]].WDOG_COUNT);
			sprintf(LCD_DISPLAY[3],"Inv Pkt:  %10d", PORT[MSVE.tmpi[0]].INV_PKT_COUNT);

			if (MSVE.ENTER)
			{
				PORT[MSVE.tmpi[0]].ERROR_COUNT = 0;
				PORT[MSVE.tmpi[0]].WDOG_COUNT = 0;
				PORT[MSVE.tmpi[0]].INV_PKT_COUNT = 0;
			}

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 10:
		{/* RS485 Statistics */
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0],"   C%d Statistics", MSVE.tmpi[0]+1);
			sprintf(LCD_DISPLAY[1],"Inv Cmd:  %10d", PORT[MSVE.tmpi[0]].INV_CMD_COUNT);
			sprintf(LCD_DISPLAY[2],"Success:  %10d", PORT[MSVE.tmpi[0]].SUCCESS);
			sprintf(LCD_DISPLAY[3],"# Retry:  %10d", PORT[MSVE.tmpi[0]].NUM_RETRIES);

			if (MSVE.ENTER)
			{
				PORT[MSVE.tmpi[0]].INV_CMD_COUNT = 0;
				PORT[MSVE.tmpi[0]].SUCCESS = 0;
				PORT[MSVE.tmpi[0]].NUM_RETRIES = 0;
			}

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}

			break;
		}

		case 20:
		{/* Number of HART Preambles */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  HART #Preambles");
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				MSVE.tmpi[3] = NUM_PREAMBLE_SM;
			}

			if (MSVE.tmpi[3]<5) MSVE.tmpi[3] = 20;
			else
			if (MSVE.tmpi[3]>20) MSVE.tmpi[3] = 5;

			sprintf(LCD_DISPLAY[3],"         %2d", MSVE.tmpi[3]);

			if (MSVE.SELECT)
			{
				MSVE.tmpi[3]++;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[3]--;
			}

			if (MSVE.ENTER)
			{
				NUM_PREAMBLE_SM = MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 21:
		{/* HART Version */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"    HART Version");
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				MSVE.tmpi[3] = DIO_HART_5.val & 0x01;
			}

			switch (MSVE.tmpi[3]&0x01)
			{
				case 1:  sprintf(LCD_DISPLAY[3],"         V5"); break;
				default: sprintf(LCD_DISPLAY[3],"         V6"); break;
			}

			if (MSVE.SELECT || MSVE.VALUE)
			{
				MSVE.tmpi[3]^=0x01;
			}

			if (MSVE.ENTER)
			{
				DIO_HART_5.val = MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 22:
		{/* HART Statistics */
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0],"HART Port Statistics");
			sprintf(LCD_DISPLAY[1],"Errors :  %10d", PORT[MSVE.tmpi[0]].ERROR_COUNT);
			sprintf(LCD_DISPLAY[2],"WDOG   :  %10d", PORT[MSVE.tmpi[0]].WDOG_COUNT);
			sprintf(LCD_DISPLAY[3],"Inv Pkt:  %10d", PORT[MSVE.tmpi[0]].INV_PKT_COUNT);

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 23:
		{/* HART Statistics */
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0],"HART Port Statistics");
			sprintf(LCD_DISPLAY[1],"Errors :  %10d", PORT[MSVE.tmpi[0]].ERROR_COUNT);
			sprintf(LCD_DISPLAY[2],"Inv Cmd:  %10d", PORT[MSVE.tmpi[0]].INV_CMD_COUNT);
			sprintf(LCD_DISPLAY[3],"Success:  %10d", PORT[MSVE.tmpi[0]].SUCCESS);

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}

			break;
		}

		case 30:
		{/* IrDA Enable */
    		if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"    IrDA Enable");
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				MSVE.tmpi[3] = IRDA_ENABLE & 0x01;
			}

			switch (MSVE.tmpi[3]&0x01)
			{
				case 0x01:  sprintf(LCD_DISPLAY[3],"        YES"); break;
				default:	sprintf(LCD_DISPLAY[3],"         NO"); break;
			}

			if (MSVE.SELECT || MSVE.VALUE)
			{
				MSVE.tmpi[3]^=0x01;
			}

			if (MSVE.ENTER)
			{
				IRDA_ENABLE &= 0xFFFFFFFF ^ 0x01;
				IRDA_ENABLE |= MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 31:
		{/* IrDA Sensitivity */
    		if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  IrDA Sensitivity");
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				MSVE.tmpi[3] = IRDA_ENABLE & 0x02;
			}

			switch (MSVE.tmpi[3]&0x02)
			{
				case 0x02:  sprintf(LCD_DISPLAY[3],"       HIGH"); break;
				default:    sprintf(LCD_DISPLAY[3],"       NORMAL"); break;
			}

			if (MSVE.SELECT || MSVE.VALUE)
			{
				MSVE.tmpi[3]^=0x02;
			}

			if (MSVE.ENTER)
			{
				IRDA_ENABLE &= 0xFFFFFFFF ^ 0x02;
				IRDA_ENABLE |= MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 32:
		{/* IrDA Statistics */
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0],"IrDA Port Statistics");
			sprintf(LCD_DISPLAY[1],"Errors :  %10d", PORT[MSVE.tmpi[0]].ERROR_COUNT);
			sprintf(LCD_DISPLAY[2],"WDOG   :  %10d", PORT[MSVE.tmpi[0]].WDOG_COUNT);
			sprintf(LCD_DISPLAY[3],"Inv Pkt:  %10d", PORT[MSVE.tmpi[0]].INV_PKT_COUNT);

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 33:
		{/* IrDA Statistics */
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0],"IrDA Port Statistics");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"Inv Cmd:  %10d", PORT[MSVE.tmpi[0]].INV_CMD_COUNT);
			sprintf(LCD_DISPLAY[3],"Success:  %10d", PORT[MSVE.tmpi[0]].SUCCESS);

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}

			break;
		}

		case 1:
		{/* configure port number based on MSVE.tmpi[0] */
			{/* slave addr */
				MSVE_Data_Input("", "ADDRESS", 3, 0, 0, 0, &PORTCFG[MSVE.tmpi[0]].Slave_ID, 0, 1);
			}

			if (MSVE.MENU||MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;

				if (MSVE.tmpi[0]==4)
				{/* GOTO HART MENU */
					MSVE.tmpi[1] = 20;
				}
				else
				{/* GOTO NEXT MENU */
					MSVE.tmpi[1]++;
				}
			}

			break;
		}

		case 0:
		{/* main screen to select port number */
			MSVE.MENU_TRAP = FALSE;

			if (MSVE.SELECT)
			{
				MSVE.tmpi[0]++;
				if (MSVE.tmpi[0]>=UART_MAX) MSVE.tmpi[0] = 0;

				while(!PORT[MSVE.tmpi[0]].PRESENT)
				{
					MSVE.tmpi[0]++;
					if (MSVE.tmpi[0]>=UART_MAX) MSVE.tmpi[0] = 0;
				}
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[0]--;
				if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = UART_MAX-1;
				
				while(!PORT[MSVE.tmpi[0]].PRESENT)
				{
					MSVE.tmpi[0]--;
					if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = UART_MAX-1;
				}
			}
			else
			if (MSVE.ENTER)
			{
				MSVE.MENU_TRAP = TRUE;

				MSVE.tmpi[2] = 1;

				if (MSVE.tmpi[0]==5)
				{/* GOTO IrDA MENU */
					MSVE.tmpi[1] = 30;
				}
				else
				{
					MSVE.tmpi[1] = 1;
				}
			}

			switch (MSVE.tmpi[0])
			{
				case 0:
				{
					if (PORT[7].PRESENT)
					{
						sprintf(LCD_DISPLAY[3],"    MODBUS COM 1    ");
					}
					else
					{
						sprintf(LCD_DISPLAY[3]," MODBUS COM 1 / PDI ");
					}
					break;
				}

				case 1:
				{
					if (PORT[6].PRESENT)
					{
						sprintf(LCD_DISPLAY[3],"    MODBUS COM 2    ");
					}
					else
					{
						sprintf(LCD_DISPLAY[3]," MODBUS COM 2 / OIT ");
					}
					break;
				}
				case 2:	sprintf(LCD_DISPLAY[3],"    MODBUS COM 3    ");	break;
				case 3:	sprintf(LCD_DISPLAY[3],"    MODBUS COM 4    ");	break;
				case 4:	sprintf(LCD_DISPLAY[3],"        HART        ");	break;
				case 5:	sprintf(LCD_DISPLAY[3],"        IrDA        ");	break;
				case 6:	sprintf(LCD_DISPLAY[3],"     MODBUS OIT     ");	break;
				case 7:	sprintf(LCD_DISPLAY[3],"     MODBUS PDI     ");	break;
			}

			break;
		}

		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_RELAY_CFG(void)
{
	unsigned int ui;

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  Configure Relay");
		sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = 0;
		MSVE.tmpi[1] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[4] = 0;
	}

	if (MSVE.tmpi[2])
	{
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:
		{/* mode */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   Relay #%d Mode", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				MSVE.tmpi[3] = RLY[MSVE.tmpi[0]].MODE;
			}

			switch(MSVE.tmpi[3])
			{
				case 0x00:
				{/* DIAG MASK */
					sprintf(LCD_DISPLAY[3],"  Variable Status");
					break;
				}

				case 0x01:
				{/* val == RLY[i].val */
					sprintf(LCD_DISPLAY[3],"Variable =  Setpoint");
					break;
				}

				case 0x03:
				{/* val >= RLY[i].val */
					sprintf(LCD_DISPLAY[3],"Variable >= Setpoint");
					break;
				}

				case 0x02:
				{/* val > RLY[i].val */
					sprintf(LCD_DISPLAY[3],"Variable >  Setpoint");
					break;
				}

				case 0x04:
				{/* val < RLY[i].val */
					sprintf(LCD_DISPLAY[3],"Variable <  Setpoint");
					break;
				}

				case 0x05:
				{/* val <= RLY[i].val */
					sprintf(LCD_DISPLAY[3],"Variable <= Setpoint");
					break;
				}

				case 0x06:
				{/* val != RLY[i].val */
					sprintf(LCD_DISPLAY[3],"Variable != Setpoint");
					break;
				}

				case 0x20:
				{/* toggle mode */
					sprintf(LCD_DISPLAY[3],"       Toggle");
					break;
				}

				case 0x30:
				{/* DIAG[0] */
					sprintf(LCD_DISPLAY[3],"   Diagnostics 1");
					break;
				}

				case 0x40:
				{/* DIAG[1] */
					sprintf(LCD_DISPLAY[3],"   Diagnostics 2");
					break;
				}

				case 0xFF:
				{/* auto mode - relay is actuated in another part of the program */
					sprintf(LCD_DISPLAY[3],"       Other");
					break;
				}

				case 0x10:
				default:
				{/* manual mode */
					sprintf(LCD_DISPLAY[3],"       Manual");
					break;
				}
			}

			if (MSVE.ENTER)
			{
				RLY[MSVE.tmpi[0]].MODE = MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;

				switch(RLY[MSVE.tmpi[0]].MODE)
				{
					case 0x00:
					{/* DIAG MASK */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x01:
					{/* val == RLY[i].val */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x03:
					{/* val >= RLY[i].val */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x02:
					{/* val > RLY[i].val */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x04:
					{/* val < RLY[i].val */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x05:
					{/* val <= RLY[i].val */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x06:
					{/* val != RLY[i].val */
						MSVE.tmpi[1] = 2;
						break;
					}

					case 0x20:
					{/* toggle mode */
						MSVE.tmpi[1] = 0;
						break;
					}

					case 0x30:
					{/* DIAG[0] */
						MSVE.tmpi[1] = 6;
						break;
					}

					case 0x40:
					{/* DIAG[1] */
						MSVE.tmpi[1] = 6;
						break;
					}

					case 0xFF:
					{/* other mode - relay is actuated in another part of the program */
						MSVE.tmpi[1] = 0;
						break;
					}

					case 0x10:
					default:
					{/* manual mode */
						MSVE.tmpi[1] = 5;
						break;
					}
				}
			}
			else
			if (MSVE.SELECT)
			{
				switch(MSVE.tmpi[3])
				{
					case 0x00:
					{/* DIAG MASK */
						MSVE.tmpi[3] = 0x01;
						break;
					}

					case 0x01:
					{/* val == RLY[i].val */
						MSVE.tmpi[3] = 0x03;
						break;
					}

					case 0x03:
					{/* val >= RLY[i].val */
						MSVE.tmpi[3] = 0x02;
						break;
					}

					case 0x02:
					{/* val > RLY[i].val */
						MSVE.tmpi[3] = 0x04;
						break;
					}

					case 0x04:
					{/* val < RLY[i].val */
						MSVE.tmpi[3] = 0x05;
						break;
					}

					case 0x05:
					{/* val <= RLY[i].val */
						MSVE.tmpi[3] = 0x06;
						break;
					}

					case 0x06:
					{/* val != RLY[i].val */
						MSVE.tmpi[3] = 0x20;
						break;
					}

					case 0x20:
					{/* toggle mode */
						MSVE.tmpi[3] = 0x30;
						break;
					}

					case 0x30:
					{/* DIAG[0] */
						MSVE.tmpi[3] = 0x40;
						break;
					}

					case 0x40:
					{/* DIAG[1] */
						MSVE.tmpi[3] = 0xFF;
						break;
					}

					case 0xFF:
					{/* auto mode - relay is actuated in another part of the program */
						MSVE.tmpi[3] = 0x10;
						break;
					}

					case 0x10:
					default:
					{/* manual mode */
						MSVE.tmpi[3] = 0x00;
						break;
					}
				}
			}
			else
			if (MSVE.VALUE)
			{
				switch(MSVE.tmpi[3])
				{
					case 0x00:
					{/* DIAG MASK */
						MSVE.tmpi[3] = 0x10;
						break;
					}

					case 0x01:
					{/* val == RLY[i].val */
						MSVE.tmpi[3] = 0x00;
						break;
					}

					case 0x03:
					{/* val >= RLY[i].val */
						MSVE.tmpi[3] = 0x01;
						break;
					}

					case 0x02:
					{/* val > RLY[i].val */
						MSVE.tmpi[3] = 0x03;
						break;
					}

					case 0x04:
					{/* val < RLY[i].val */
						MSVE.tmpi[3] = 0x02;
						break;
					}

					case 0x05:
					{/* val <= RLY[i].val */
						MSVE.tmpi[3] = 0x04;
						break;
					}

					case 0x06:
					{/* val != RLY[i].val */
						MSVE.tmpi[3] = 0x05;
						break;
					}

					case 0x20:
					{/* toggle mode */
						MSVE.tmpi[3] = 0x06;
						break;
					}

					case 0x30:
					{/* DIAG[0] */
						MSVE.tmpi[3] = 0x20;
						break;
					}

					case 0x40:
					{/* DIAG[1] */
						MSVE.tmpi[3] = 0x30;
						break;
					}

					case 0xFF:
					{/* auto mode - relay is actuated in another part of the program */
						MSVE.tmpi[3] = 0x40;
						break;
					}

					case 0x10:
					default:
					{/* manual mode */
						MSVE.tmpi[3] = 0xFF;
						break;
					}
				}
			}

			break;
		}

		case 2:
		{/* variable select */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  Relay #%d Variable", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				MSVE.tmpi[3] = RLY[MSVE.tmpi[0]].v.val;
			}

			if (MSVE.tmpi[3]<0)
			{
				MSVE.tmpi[3] = HART_Lookup_n((int*)&HART_DV_Table) - 1;
			}

			MSVE.ptmpv = HART_Lookup(MSVE.tmpi[3], &ui, (int*)&HART_DV_Table);
			if ((MSVE.ptmpv==(VAR*)0) || (MSVE.ptmpv==&REG_DUMMY))
			{
				MSVE.tmpi[3] = 0;
				MSVE.ptmpv = HART_Lookup(MSVE.tmpi[3], &ui, (int*)&HART_DV_Table);
			}

			sprintf(LCD_DISPLAY[2],"Variable Index: %d", MSVE.tmpi[3]);
			sprintf(LCD_DISPLAY[3],"%s", MSVE.ptmpv->name);

			if (MSVE.ENTER)
			{
				RLY[MSVE.tmpi[0]].class = MSVE.ptmpv->class;
				RLY[MSVE.tmpi[0]].unit = MSVE.ptmpv->unit & 0xFF;
				RLY[MSVE.tmpi[0]].v.val = MSVE.tmpi[3];
				Set_RLY_Units(0);
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				RLY[MSVE.tmpi[0]].class = MSVE.ptmpv->class;
				if (RLY[MSVE.tmpi[0]].MODE==0x00) MSVE.tmpi[1] = 6;
				else MSVE.tmpi[1]++;
			}
			else
			if (MSVE.SELECT)
			{
				MSVE.tmpi[3]++;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[3]--;
			}

			break;
		}

		case 3:
		{/* unit */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0]," Relay #%d Unit Code", MSVE.tmpi[0]+1);
				Get_Class(RLY[MSVE.tmpi[0]].class, MSVE.str[3]);
				sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
				MSVE.tmpi[3] = RLY[MSVE.tmpi[0]].unit & 0xFF;
			}

			Get_Unit(RLY[MSVE.tmpi[0]].class, MSVE.tmpi[3], MSVE.str[3]);

			sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
			sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

			if (MSVE.ENTER)
			{
				RLY[MSVE.tmpi[0]].unit = MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}
			else
			if (MSVE.SELECT)
			{
				if (RLY[MSVE.tmpi[0]].class!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(RLY[MSVE.tmpi[0]].class, MSVE.tmpi[3]);
			}
			else
			if (MSVE.VALUE)
			{
				if (RLY[MSVE.tmpi[0]].class!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(RLY[MSVE.tmpi[0]].class, MSVE.tmpi[3]);
			}

			break;
		}

		case 4:
		{/* value */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = RLY[MSVE.tmpi[0]].class;
				MSVE.tmpv.unit = RLY[MSVE.tmpi[0]].unit;
				MSVE.tmpv.calc_unit = RLY[MSVE.tmpi[0]].unit;
				MSVE.tmpv.val = RLY[MSVE.tmpi[0]].setpoint;
				MSVE.tmpv.calc_val = RLY[MSVE.tmpi[0]].setpoint;
				sprintf (MSVE.str[3], "Relay #%d Setpoint", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 13, 1, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				RLY[MSVE.tmpi[0]].setpoint = MSVE.tmpv.val;
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}

			break;
		}

		case 5:
		{/* ON/OFF */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  Relay #%d Status", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
			}

			RLY[MSVE.tmpi[0]].ON.val &= 0x01;

			if (RLY[MSVE.tmpi[0]].ON.val)
			{
				sprintf(LCD_DISPLAY[3],"         ON");
			}
			else
			{
				sprintf(LCD_DISPLAY[3],"        OFF");
			}

			if (MSVE.ENTER)
			{
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}
			else
			if (MSVE.SELECT || MSVE.VALUE)
			{
				RLY[MSVE.tmpi[0]].ON.val ^= 0x01;
			}

			break;
		}

		case 6:
		{/* status/diag mask */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   Relay #%d Mask", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				RLY[MSVE.tmpi[0]].STATUS_MASK &= 0xFFFF;
				sprintf(LCD_DISPLAY[3],"%04X", RLY[MSVE.tmpi[0]].STATUS_MASK);
			}

			if (MSVE.ENTER && MSVE.CURSOR_ENABLED)
			{
				MSVE.CURSOR_ENABLED = FALSE;
				sscanf(LCD_DISPLAY[3], "%04X", &RLY[MSVE.tmpi[0]].STATUS_MASK);
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}
			else
			if (MSVE.SELECT)
			{
				if (!MSVE.CURSOR_ENABLED)
				{
					MSVE.CURSOR_ENABLED = TRUE;
					MSVE.CURSOR_ROW = 3;
					MSVE.CURSOR_COL = 3;
				}
				else
				{
					MSVE.CURSOR_COL--;
					if (MSVE.CURSOR_COL<0)
					{
						MSVE.CURSOR_COL = 3;
					}
				}
			}
			else
			if (MSVE.VALUE && MSVE.CURSOR_ENABLED)
			{
				if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == '9')
				{
					LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = 'A';
				}
				else
				if (LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] == 'F')
				{
					LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL] = '0';
				}
				else
				{
					LCD_DISPLAY[MSVE.CURSOR_ROW][MSVE.CURSOR_COL]++;
				}
			}

			break;
		}

		case 0:
		{/* main screen to select port number */
			MSVE.MENU_TRAP = FALSE;

			if (MSVE.SELECT)
			{
				MSVE.tmpi[0]++;
				if (MSVE.tmpi[0]>1) MSVE.tmpi[0] = 0;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[0]--;
				if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = 1;
			}
			else
			if (MSVE.ENTER)
			{
				MSVE.MENU_TRAP = TRUE;

				MSVE.tmpi[2] = 1;

				MSVE.tmpi[1] = 1;
			}

			if (RLY[MSVE.tmpi[0]].ON.val)
			{
				sprintf(LCD_DISPLAY[3],"   Relay #%d (ON)",MSVE.tmpi[0]+1);
			}
			else
			{
				sprintf(LCD_DISPLAY[3],"   Relay #%d (OFF)",MSVE.tmpi[0]+1);
			}

			break;
		}

		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_AI_CFG(void)
{
	unsigned int ui;
	char u[8];
	char u1[8];
	float t;
	int i;

	if (MSVE.FRESH)
	{
		for (i=0;i<AI_NLOOPS;i++)
		{
			if (AI[i].present) break;
		}

		if (i==AI_NLOOPS)
		{
			if (!MSVE.DIR) MSVE.PAGE++;
			else MSVE.PAGE--;
			return;
		}

		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"    Configure AI");
		sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = i;
		MSVE.tmpi[1] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[4] = 0;
	}

	if (MSVE.tmpi[2])
	{
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:
		{/* variable select */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   AI #%d Variable", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				MSVE.tmpi[3] = AI[MSVE.tmpi[0]].v.val;
			}

			if (MSVE.tmpi[3]<-1)
			{
				MSVE.tmpi[3] = HART_Lookup_n((int*)&HART_DVINPUT_Table) - 1;
			}

			if (MSVE.tmpi[3]!=-1)
			{
				MSVE.ptmpv = HART_Lookup(MSVE.tmpi[3], &ui, (int*)&HART_DVINPUT_Table);
				if ((MSVE.ptmpv==(VAR*)0) || (MSVE.ptmpv==&REG_DUMMY))
				{
					MSVE.tmpi[3] = -1;
					MSVE.ptmpv = HART_Lookup(MSVE.tmpi[3], &ui, (int*)&HART_DVINPUT_Table);
				}
			}

			if (MSVE.tmpi[3]==-1)
			{
				sprintf(LCD_DISPLAY[2],"Variable Index: ?");
				sprintf(LCD_DISPLAY[3],"Disabled");
			}
			else
			{
				sprintf(LCD_DISPLAY[2],"Variable Index: %d", MSVE.tmpi[3]);
				sprintf(LCD_DISPLAY[3],"%s", MSVE.ptmpv->name);
			}

			if (MSVE.ENTER)
			{
				if (AI[MSVE.tmpi[0]].v.val != MSVE.tmpi[3])
				{
					AI[MSVE.tmpi[0]].v.val = MSVE.tmpi[3];
					AI[MSVE.tmpi[0]].class.val = MSVE.ptmpv->class;
					AI[MSVE.tmpi[0]].unit.val = MSVE.ptmpv->unit & 0xFF;
					Set_Units(0);

					VAR_Update(&AI[MSVE.tmpi[0]].LRV, 0.0,0,0);
					VAR_Update(&AI[MSVE.tmpi[0]].URV, 0.0,0,0);

					Update_Flags_Goto_Next_Menu(1,1);
				}
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				AI[MSVE.tmpi[0]].class.val = MSVE.ptmpv->class;
				Set_Units(0);
				if (AI[MSVE.tmpi[0]].v.val==-1) MSVE.tmpi[1] = 0;
				else MSVE.tmpi[1]++;
			}
			else
			if (MSVE.SELECT)
			{
				MSVE.tmpi[3]++;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[3]--;
			}

			break;
		}

		case 2:
		{/* unit */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  AI #%d Unit Code", MSVE.tmpi[0]+1);
				Get_Class(AI[MSVE.tmpi[0]].class.val, MSVE.str[3]);
				sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
				MSVE.tmpi[3] = AI[MSVE.tmpi[0]].unit.val & 0xFF;
			}

			Get_Unit(AI[MSVE.tmpi[0]].class.val, MSVE.tmpi[3], MSVE.str[3]);

			sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
			sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

			if (MSVE.ENTER)
			{
				if (AI[MSVE.tmpi[0]].unit.val != MSVE.tmpi[3])
				{
					MSVE.ptmpv = HART_Lookup(AI[MSVE.tmpi[0]].v.val, &ui, (int*)&HART_DVINPUT_Table);
					VAR_Update(&AI[MSVE.tmpi[0]].LRV, Convert(AI[MSVE.tmpi[0]].class.val, AI[MSVE.tmpi[0]].unit.val, MSVE.tmpi[3], AI[MSVE.tmpi[0]].LRV.val, 0, MSVE.ptmpv->aux),0,0);
					VAR_Update(&AI[MSVE.tmpi[0]].URV, Convert(AI[MSVE.tmpi[0]].class.val, AI[MSVE.tmpi[0]].unit.val, MSVE.tmpi[3], AI[MSVE.tmpi[0]].URV.val, 0, MSVE.ptmpv->aux),0,0);
					AI[MSVE.tmpi[0]].unit.val = MSVE.tmpi[3];
					Set_Units(0);
					Update_Flags_Goto_Next_Menu(1,1);
				}
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				Set_Units(0);

				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}
			else
			if (MSVE.SELECT)
			{
				if (AI[MSVE.tmpi[0]].class.val!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(AI[MSVE.tmpi[0]].class.val, MSVE.tmpi[3]);
			}
			else
			if (MSVE.VALUE)
			{
				if (AI[MSVE.tmpi[0]].class.val!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(AI[MSVE.tmpi[0]].class.val, MSVE.tmpi[3]);
			}

			break;
		}

		case 3:
		{/* LRV */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = AI[MSVE.tmpi[0]].LRV.class;
				MSVE.tmpv.unit = AI[MSVE.tmpi[0]].LRV.unit;
				MSVE.tmpv.calc_unit = AI[MSVE.tmpi[0]].LRV.unit;
				MSVE.tmpv.val = AI[MSVE.tmpi[0]].LRV.val;
				MSVE.tmpv.calc_val = AI[MSVE.tmpi[0]].LRV.val;
				sprintf (MSVE.str[3], "AI #%d LRV", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 13, 1, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				VAR_Update(&AI[MSVE.tmpi[0]].LRV, MSVE.tmpv.val,0,0);
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 4:
		{/* URV */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = AI[MSVE.tmpi[0]].URV.class;
				MSVE.tmpv.unit = AI[MSVE.tmpi[0]].URV.unit;
				MSVE.tmpv.calc_unit = AI[MSVE.tmpi[0]].URV.unit;
				MSVE.tmpv.val = AI[MSVE.tmpi[0]].URV.val;
				MSVE.tmpv.calc_val = AI[MSVE.tmpi[0]].URV.val;
				sprintf (MSVE.str[3], "AI #%d URV", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 13, 1, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				VAR_Update(&AI[MSVE.tmpi[0]].URV, MSVE.tmpv.val,0,0);
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 5:
		{/* trim 4mA */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   AI #%d Trim 4mA", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[2],"SELECT = RESET");
				sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");
				MSVE.tmpf[0] = AI[MSVE.tmpi[0]].TRIM_MIN_C;
			}

			sprintf(LCD_DISPLAY[1],"Connect  4mA(%5.3f)", (REG_ADC[MSVE.tmpi[0]+ADC_Ain1].val * 10.0));

			if (MSVE.ENTER)
			{
			/*	VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MIN, 0.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MIN_C = REG_ADC[MSVE.tmpi[0]+ADC_Ain1].val * 10.0;
				Update_Flags_Goto_Next_Menu(1,1);   */ 
				MSVE.tmpi[2] = 1;              
				MSVE.tmpi[1] = 51;            /*Add are you sure screens for LCD RS*/
			}

			if (MSVE.SELECT)
			{
				VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MIN, 0.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MIN_C = VAR_Get_Unit_Param(&AI[MSVE.tmpi[0]].CURRENT, reg_direct_bmin, 0, 0);
				VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MAX, 32767.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MAX_C = VAR_Get_Unit_Param(&AI[MSVE.tmpi[0]].CURRENT, reg_direct_bmax, 0, 0);
				Update_Flags_Goto_Next_Menu(1,1);
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 7;
			}

			if (MSVE.MENU /*|| MSVE.ENTER*/)     /*Add are you sure screens for LCD RS*/
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}
		/**********Add are you sure screens for LCD RS**********/
        case 51: 
        {
		   	if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   Press SELECT if");
				sprintf(LCD_DISPLAY[1],"    you are sure");
				sprintf(LCD_DISPLAY[2],""); 
				sprintf(LCD_DISPLAY[3]," Press MENU to skip"); 
			} 
		   	if (MSVE.SELECT)
			{
				VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MIN, 0.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MIN_C = REG_ADC[MSVE.tmpi[0]+ADC_Ain1].val * 10.0;
				Update_Flags_Goto_Next_Menu(1,1);
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 5;	
			} 
		    if (MSVE.MENU)
			{   
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 6;
			}   
			
			break;
        }
        /************Add are you sure screens for LCD RS************/
		case 6:
		{/* trim 20mA */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  AI #%d Trim 20mA", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[2],"SELECT = RESET");
				sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");
				MSVE.tmpf[0] = AI[MSVE.tmpi[0]].TRIM_MAX_C;
			}

			sprintf(LCD_DISPLAY[1],"Connect 20mA(%5.3f)", (REG_ADC[MSVE.tmpi[0]+ADC_Ain1].val * 10.0));

			if (MSVE.ENTER)
			{
			/*	VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MAX, 32767.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MAX_C = REG_ADC[MSVE.tmpi[0]+ADC_Ain1].val * 10.0;
				Update_Flags_Goto_Next_Menu(1,1);   */
				MSVE.tmpi[2] = 1;              
				MSVE.tmpi[1] = 61;            /*Add are you sure screens for LCD RS*/
			}

			if (MSVE.SELECT)
			{
				VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MIN, 0.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MIN_C = VAR_Get_Unit_Param(&AI[MSVE.tmpi[0]].CURRENT, reg_direct_bmin, 0, 0);
				VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MAX, 32767.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MAX_C = VAR_Get_Unit_Param(&AI[MSVE.tmpi[0]].CURRENT, reg_direct_bmax, 0, 0);
				Update_Flags_Goto_Next_Menu(1,1);
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 7;
			}

			if (MSVE.MENU /*|| MSVE.ENTER*/) /*Add are you sure screens for LCD RS*/
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}
        
        /**********Add are you sure screens for LCD RS**********/
        case 61: 
        {
		   	if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   Press SELECT if");
				sprintf(LCD_DISPLAY[1],"    you are sure");
				sprintf(LCD_DISPLAY[2],""); 
				sprintf(LCD_DISPLAY[3]," Press MENU to skip"); 
			} 
		   	if (MSVE.SELECT)
			{
				VAR_Update(&AI[MSVE.tmpi[0]].TRIM_MAX, 32767.0,0,0);
				AI[MSVE.tmpi[0]].TRIM_MAX_C = REG_ADC[MSVE.tmpi[0]+ADC_Ain1].val * 10.0;
				Update_Flags_Goto_Next_Menu(1,1);
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 6;	
			} 
		    if (MSVE.MENU)
			{   
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 7;
			}   
			
			break;
        }
        /************Add are you sure screens for LCD RS************/
        
		case 7:
		{/* DAMP */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = c_time;
				MSVE.tmpv.unit = u_time_sec;
				MSVE.tmpv.calc_unit = u_time_sec;
				if (AI[MSVE.tmpi[0]].CURRENT.dampening<0.0) AI[MSVE.tmpi[0]].CURRENT.dampening = 0.0;
				MSVE.tmpv.val = AI[MSVE.tmpi[0]].CURRENT.dampening;
				MSVE.tmpv.calc_val = AI[MSVE.tmpi[0]].CURRENT.dampening;
				sprintf (MSVE.str[3], "AI #%d Dampening", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 4, 1, 0, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				AI[MSVE.tmpi[0]].CURRENT.dampening = MSVE.tmpv.val;
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 8:
		{/* display current */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  Analog Input #%d",MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				MSVE.ptmpv = HART_Lookup(AI[MSVE.tmpi[0]].v.val, &ui, (int*)&HART_DVINPUT_Table);
			}

			Get_Unit(AI[MSVE.tmpi[0]].CURRENT.class, AI[MSVE.tmpi[0]].CURRENT.unit, u);
			Get_Unit(AI[MSVE.tmpi[0]].CURRENT_PERCENT_OF_RANGE.class, AI[MSVE.tmpi[0]].CURRENT_PERCENT_OF_RANGE.unit, u1);
			sprintf(LCD_DISPLAY[1],"%6.2f %s / %6.2f %s", AI[MSVE.tmpi[0]].CURRENT.val, u, AI[MSVE.tmpi[0]].CURRENT_PERCENT_OF_RANGE.val, u1);

			if (AI[MSVE.tmpi[0]].v.val>=0)
			{
				Get_Unit(AI[MSVE.tmpi[0]].class.val, AI[MSVE.tmpi[0]].unit.val, u);
				sprintf(LCD_DISPLAY[2],"%s", MSVE.ptmpv->name);
				sprintf(LCD_DISPLAY[3],"%6.2f %s", AI[MSVE.tmpi[0]].val, u);
			}
			else
			{
				sprintf(LCD_DISPLAY[2],"Disabled");
				sprintf(LCD_DISPLAY[3],"");
			}

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}

			break;
		}

		case 0:
		{/* main screen to select port number */
			MSVE.MENU_TRAP = FALSE;

			if (MSVE.SELECT)
			{
				MSVE.tmpi[0]++;
				if (MSVE.tmpi[0]>=AI_NLOOPS) MSVE.tmpi[0] = 0;

				while (!AI[MSVE.tmpi[0]].present)
				{
					MSVE.tmpi[0]++;
					if (MSVE.tmpi[0]>=AI_NLOOPS) MSVE.tmpi[0] = 0;
				}
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[0]--;
				if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = AI_NLOOPS-1;

				while (!AI[MSVE.tmpi[0]].present)
				{
					MSVE.tmpi[0]--;
					if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = AI_NLOOPS-1;
				}
			}
			else
			if (MSVE.ENTER)
			{
				MSVE.MENU_TRAP = TRUE;

				MSVE.tmpi[2] = 1;

				MSVE.tmpi[1] = 1;
			}

			sprintf(LCD_DISPLAY[3],"  Analog Input #%d",MSVE.tmpi[0]+1);

			break;
		}

		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_AO_CFG(void)
{                                                
	unsigned int ui;
	char u[8];
	char u1[8];
	float t;
	int i;

	if (MSVE.FRESH)
	{
		for (i=0;i<AO_NLOOPS;i++)
		{
			if (AO[i].present) break;
		}

		if (i==AO_NLOOPS)
		{
			if (!MSVE.DIR) MSVE.PAGE++;
			else MSVE.PAGE--;
			return;
		}

		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"    Configure AO");
		sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = i; // number of Analog Outputs?
		MSVE.tmpi[1] = 0; // submenu screen # ???
		MSVE.tmpi[2] = 0; // flag for preparing new screen?
		MSVE.tmpi[3] = 0; // the current Variable Index?
		MSVE.tmpi[4] = 0; // not used in this function
	}

	if (MSVE.tmpi[2])
	{
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:
		{/* variable select */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   AO #%d Variable", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				MSVE.tmpi[3] = AO[MSVE.tmpi[0]].v.val;
			}

			if (MSVE.tmpi[3]<-2)
			{
				MSVE.tmpi[3] = HART_Lookup_n((int*)&HART_DV_Table) - 1;
			}

			if ((MSVE.tmpi[3]!=-2) && (MSVE.tmpi[3]!=-1))
			{
				MSVE.ptmpv = HART_Lookup(MSVE.tmpi[3], &ui, (int*)&HART_DV_Table);
				if ((MSVE.ptmpv==(VAR*)0) || (MSVE.ptmpv==&REG_DUMMY))
				{
					MSVE.tmpi[3] = -2;
					MSVE.ptmpv = HART_Lookup(MSVE.tmpi[3], &ui, (int*)&HART_DV_Table);
				}
			}

			if (MSVE.tmpi[3]==-2)
			{
				sprintf(LCD_DISPLAY[2],"Variable Index: ?");
				sprintf(LCD_DISPLAY[3],"PID");
			}
			else
			if (MSVE.tmpi[3]==-1)
			{
				sprintf(LCD_DISPLAY[2],"Variable Index: ?");
				sprintf(LCD_DISPLAY[3],"Disabled/Manual");
			}
			else
			{
				sprintf(LCD_DISPLAY[2],"Variable Index: %d", MSVE.tmpi[3]);
				sprintf(LCD_DISPLAY[3],"%s", MSVE.ptmpv->name);
			}

			if (MSVE.ENTER)
			{
				if (AO[MSVE.tmpi[0]].v.val != MSVE.tmpi[3])
				{
					AO[MSVE.tmpi[0]].v.val = MSVE.tmpi[3];

					AO[MSVE.tmpi[0]].class.val = MSVE.ptmpv->class;
					AO[MSVE.tmpi[0]].unit.val = MSVE.ptmpv->unit & 0xFF;
					Set_Units(0);

					VAR_Update(&AO[MSVE.tmpi[0]].LRV, 0.0,0,0);
					VAR_Update(&AO[MSVE.tmpi[0]].URV, 0.0,0,0);
					AO[MSVE.tmpi[0]].CURRENT.dampening = 0.0;
					AO[MSVE.tmpi[0]].PID_setpoint = 0.0;  
					/*TYPE change Add PID to stream table RS*/
					VAR_Update(&AO[MSVE.tmpi[0]].P, 0.1,0,0);     
					VAR_Update(&AO[MSVE.tmpi[0]].I, 1.0,0,0);     
					VAR_Update(&AO[MSVE.tmpi[0]].D, 0.0,0,0);     

					if (AO[MSVE.tmpi[0]].v.val>=0)
					{
						AO[MSVE.tmpi[0]].MANUAL = FALSE;
					}
					else
					{
						AO[MSVE.tmpi[0]].MANUAL = TRUE;
					}

					Update_Flags_Goto_Next_Menu(1,1);
				}
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				AO[MSVE.tmpi[0]].class.val = MSVE.ptmpv->class;
				Set_Units(0);
				if (AO[MSVE.tmpi[0]].v.val==-1) MSVE.tmpi[1] = 5;
				else MSVE.tmpi[1]++;
			}
			else
			if (MSVE.SELECT)
			{
				MSVE.tmpi[3]++;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[3]--;
			}

			break;
		}

		case 2:
		{/* unit */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  AO #%d Unit Code", MSVE.tmpi[0]+1);
				Get_Class(AO[MSVE.tmpi[0]].class.val, MSVE.str[3]);
				sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
				MSVE.tmpi[3] = AO[MSVE.tmpi[0]].unit.val & 0xFF;
			}

			Get_Unit(AO[MSVE.tmpi[0]].class.val, MSVE.tmpi[3], MSVE.str[3]);

			sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
			sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

			if (MSVE.ENTER)
			{
				if (AO[MSVE.tmpi[0]].unit.val != MSVE.tmpi[3])
				{
					MSVE.ptmpv = HART_Lookup(AO[MSVE.tmpi[0]].v.val, &ui, (int*)&HART_DV_Table);
					VAR_Update(&AO[MSVE.tmpi[0]].LRV, Convert(AO[MSVE.tmpi[0]].class.val, AO[MSVE.tmpi[0]].unit.val, MSVE.tmpi[3], AO[MSVE.tmpi[0]].LRV.val, 0, MSVE.ptmpv->aux),0,0);
					VAR_Update(&AO[MSVE.tmpi[0]].URV, Convert(AO[MSVE.tmpi[0]].class.val, AO[MSVE.tmpi[0]].unit.val, MSVE.tmpi[3], AO[MSVE.tmpi[0]].URV.val, 0, MSVE.ptmpv->aux),0,0);
					AO[MSVE.tmpi[0]].unit.val = MSVE.tmpi[3];
					Set_Units(0);
					Update_Flags_Goto_Next_Menu(1,1);
				}
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				Set_Units(0);

				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}
			else
			if (MSVE.SELECT)
			{
				if (AO[MSVE.tmpi[0]].class.val!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(AO[MSVE.tmpi[0]].class.val, MSVE.tmpi[3]);
			}
			else
			if (MSVE.VALUE)
			{
				if (AO[MSVE.tmpi[0]].class.val!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(AO[MSVE.tmpi[0]].class.val, MSVE.tmpi[3]);
			}

			break;
		}

		case 3:
		{/* LRV */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = AO[MSVE.tmpi[0]].LRV.class;
				MSVE.tmpv.unit = AO[MSVE.tmpi[0]].LRV.unit;
				MSVE.tmpv.calc_unit = AO[MSVE.tmpi[0]].LRV.unit;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].LRV.val;
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].LRV.val;
				sprintf (MSVE.str[3], "AO #%d LRV", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 13, 1, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				VAR_Update(&AO[MSVE.tmpi[0]].LRV, MSVE.tmpv.val,0,0);
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 4:
		{/* URV */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = AO[MSVE.tmpi[0]].URV.class;
				MSVE.tmpv.unit = AO[MSVE.tmpi[0]].URV.unit;
				MSVE.tmpv.calc_unit = AO[MSVE.tmpi[0]].URV.unit;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].URV.val;
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].URV.val;
				sprintf (MSVE.str[3], "AO #%d URV", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 13, 1, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				VAR_Update(&AO[MSVE.tmpi[0]].URV, MSVE.tmpv.val,0,0);
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 5:
		{/* trim 4mA */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"   AO #%d Trim 4mA", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"Connect Meter");
				sprintf(LCD_DISPLAY[2],"SELECT = RESET");
				sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");
				MSVE.tmpf[0] = AO[MSVE.tmpi[0]].TRIM_MIN_C;
			}

			if (MSVE.SELECT)
			{
				if (((MSVE.tmpi[0]+DAC_Aout1)>=DAC_Aout6) && ((MSVE.tmpi[0]+DAC_Aout1)<=DAC_Aout9)) VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MIN, TMIN2,0,0);
				else VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MIN, TMIN,0,0);
				AO[MSVE.tmpi[0]].TRIM_MIN_C = VAR_Get_Unit_Param(&AO[MSVE.tmpi[0]].CURRENT, reg_direct_bmin, 0, 0);
				if (((MSVE.tmpi[0]+DAC_Aout1)>=DAC_Aout6) && ((MSVE.tmpi[0]+DAC_Aout1)<=DAC_Aout9)) VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MAX, TMAX2,0,0);
				else VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MAX, TMAX,0,0);
				AO[MSVE.tmpi[0]].TRIM_MAX_C = VAR_Get_Unit_Param(&AO[MSVE.tmpi[0]].CURRENT, reg_direct_bmax, 0, 0);

				Update_Flags_Goto_Next_Menu(1,1);

				MSVE.tmpi[2] = 1;
				if (AO[MSVE.tmpi[0]].v.val==-1) MSVE.tmpi[1] = 9;
				else MSVE.tmpi[1] = 7;
			}

			if (MSVE.ENTER)
			{
				if (((MSVE.tmpi[0]+DAC_Aout1)>=DAC_Aout6) && ((MSVE.tmpi[0]+DAC_Aout1)<=DAC_Aout9)) VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MIN, TMIN2,0,0);
				else VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MIN, TMIN,0,0);
				AO[MSVE.tmpi[0]].TRIM_MIN_C = VAR_Get_Unit_Param(&AO[MSVE.tmpi[0]].CURRENT, reg_direct_bmin, 0, 0);
				AO[MSVE.tmpi[0]].MANUAL = TRUE;
				VAR_Update(&AO[MSVE.tmpi[0]].CURRENT, AO[MSVE.tmpi[0]].TRIM_MIN_C, 0, 0);
				Update_Flags_Goto_Next_Menu(1,1);

				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 51;
			}

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 51:
		{/* trim 4mA */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = AO[MSVE.tmpi[0]].CURRENT.class;
				MSVE.tmpv.unit = AO[MSVE.tmpi[0]].CURRENT.calc_unit;
				MSVE.tmpv.calc_unit = AO[MSVE.tmpi[0]].CURRENT.calc_unit;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].TRIM_MIN_C;
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].TRIM_MIN_C;
				sprintf (MSVE.str[3], "AO #%d  4mA Trim", MSVE.tmpi[0]+1);  
			}
            
            MSVE_Data_Input(MSVE.str[3], "Meter Value", 6, 3, 0, 0, &MSVE.tmpv, 1, 0);
            sprintf(LCD_DISPLAY[1]," Press MENU to skip");          /*Add are you sure screens for LCD RS*/ 
            
			if (MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].TRIM_MIN_C = MSVE.tmpv.val;
				AO[MSVE.tmpi[0]].MANUAL = FALSE;
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].MANUAL = FALSE;
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 6;
			}

			break;
		}

		case 6:
		{/* trim 20mA */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"  AO #%d Trim 20mA", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"Connect Meter");
				sprintf(LCD_DISPLAY[2],"SELECT = RESET");
				sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");
				MSVE.tmpf[0] = AO[MSVE.tmpi[0]].TRIM_MAX_C;
			}

			if (MSVE.SELECT)
			{
				if (((MSVE.tmpi[0]+DAC_Aout1)>=DAC_Aout6) && ((MSVE.tmpi[0]+DAC_Aout1)<=DAC_Aout9)) VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MIN, TMIN2,0,0);
				else VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MIN, TMIN,0,0);
				AO[MSVE.tmpi[0]].TRIM_MIN_C = VAR_Get_Unit_Param(&AO[MSVE.tmpi[0]].CURRENT, reg_direct_bmin, 0, 0);
				if (((MSVE.tmpi[0]+DAC_Aout1)>=DAC_Aout6) && ((MSVE.tmpi[0]+DAC_Aout1)<=DAC_Aout9)) VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MAX, TMAX2,0,0);
				else VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MAX, TMAX,0,0);
				AO[MSVE.tmpi[0]].TRIM_MAX_C = VAR_Get_Unit_Param(&AO[MSVE.tmpi[0]].CURRENT, reg_direct_bmax, 0, 0);

				Update_Flags_Goto_Next_Menu(1,1);

				MSVE.tmpi[2] = 1;
				if (AO[MSVE.tmpi[0]].v.val==-1) MSVE.tmpi[1] = 9;
				else MSVE.tmpi[1] = 7;
			}

			if (MSVE.ENTER)
			{
				if (((MSVE.tmpi[0]+DAC_Aout1)>=DAC_Aout6) && ((MSVE.tmpi[0]+DAC_Aout1)<=DAC_Aout9)) VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MAX, TMAX2,0,0);
				else VAR_Update(&AO[MSVE.tmpi[0]].TRIM_MAX, TMAX,0,0);
				AO[MSVE.tmpi[0]].TRIM_MAX_C = VAR_Get_Unit_Param(&AO[MSVE.tmpi[0]].CURRENT, reg_direct_bmax, 0, 0);
				AO[MSVE.tmpi[0]].MANUAL = TRUE;
				VAR_Update(&AO[MSVE.tmpi[0]].CURRENT, AO[MSVE.tmpi[0]].TRIM_MAX_C, 0, 0);
				Update_Flags_Goto_Next_Menu(1,1);

				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 61;
			}

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				if (AO[MSVE.tmpi[0]].v.val==-1) MSVE.tmpi[1] = 9;
				else MSVE.tmpi[1]++;
			}

			break;
		}

		case 61:
		{/* trim 20mA */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = AO[MSVE.tmpi[0]].CURRENT.class;
				MSVE.tmpv.unit = AO[MSVE.tmpi[0]].CURRENT.calc_unit;
				MSVE.tmpv.calc_unit = AO[MSVE.tmpi[0]].CURRENT.calc_unit;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].TRIM_MAX_C;
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].TRIM_MAX_C;
				sprintf (MSVE.str[3], "AO #%d 20mA Trim", MSVE.tmpi[0]+1);  
			}
            
           	MSVE_Data_Input(MSVE.str[3], "Meter Value", 6, 3, 0, 0, &MSVE.tmpv, 1, 0); 
			sprintf(LCD_DISPLAY[1]," Press MENU to skip");        /*Add are you sure screens for LCD RS*/

			if (MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].TRIM_MAX_C = MSVE.tmpv.val;
				AO[MSVE.tmpi[0]].MANUAL = FALSE;
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].MANUAL = FALSE;
				MSVE.tmpi[2] = 1;
				if (AO[MSVE.tmpi[0]].v.val==-1) MSVE.tmpi[1] = 9;
				else MSVE.tmpi[1] = 7;
			}

			break;
		}

		case 7:
		{/* Alarm Select */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0]," AO #%d Alarm Select", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");
				MSVE.tmpi[3] = AO[MSVE.tmpi[0]].ALARM_SELECT & 0x01;
			}

			switch (MSVE.tmpi[3]&0x01)
			{
				case 1:  sprintf(LCD_DISPLAY[3],"      LOW (4mA)"); break;
				default: sprintf(LCD_DISPLAY[3],"     HIGH (20mA)"); break;
			}

			if (MSVE.SELECT || MSVE.VALUE)
			{
				MSVE.tmpi[3]^=0x01;
			}

			if (MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].ALARM_SELECT = MSVE.tmpi[3];
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 8:
		{/* AUTO&PID&DAMP/MANUAL */
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"     AO #%d MODE", MSVE.tmpi[0]+1);
				sprintf(LCD_DISPLAY[1],"");
				sprintf(LCD_DISPLAY[2],"");

				if ((!AO[MSVE.tmpi[0]].MANUAL) && (AO[MSVE.tmpi[0]].REVERSE)) MSVE.tmpi[3] = 2;
				else if (AO[MSVE.tmpi[0]].MANUAL) MSVE.tmpi[3] = 1;
				else MSVE.tmpi[3] = 0;
			}

			switch (MSVE.tmpi[3])
			{
				case 2:  sprintf(LCD_DISPLAY[3]," Automatic/Reverse"); break;
				case 1:  sprintf(LCD_DISPLAY[3],"       Manual"); break;
				default: sprintf(LCD_DISPLAY[3],"     Automatic"); MSVE.tmpi[3] = 0; break;
			}

			if (MSVE.SELECT)
			{
				MSVE.tmpi[3]++;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[3]--;
				if (MSVE.tmpi[3]<0) MSVE.tmpi[3] = 2;
			}

			if (MSVE.ENTER)
			{
				switch (MSVE.tmpi[3])
				{
					case 2:  AO[MSVE.tmpi[0]].MANUAL = 0; AO[MSVE.tmpi[0]].REVERSE = 1; break;
					case 1:  AO[MSVE.tmpi[0]].MANUAL = 1; AO[MSVE.tmpi[0]].REVERSE = 0; break;
					default: AO[MSVE.tmpi[0]].MANUAL = 0; AO[MSVE.tmpi[0]].REVERSE = 0; break;
				}

				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				if (AO[MSVE.tmpi[0]].MANUAL) MSVE.tmpi[1] = 9;
				else MSVE.tmpi[1] = 81;
			}

			break;
		}

		case 81:
		{/* DAMP */
			if (MSVE.FRESH)
			{
				MSVE.tmpv.class = c_time;
				MSVE.tmpv.unit = u_time_sec;
				MSVE.tmpv.calc_unit = u_time_sec;
				if (AO[MSVE.tmpi[0]].CURRENT.dampening<0.0) AO[MSVE.tmpi[0]].CURRENT.dampening = 0.0;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].CURRENT.dampening;
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].CURRENT.dampening;
				sprintf (MSVE.str[3], "AO #%d Dampening", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 4, 1, 0, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].CURRENT.dampening = MSVE.tmpv.val;
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 82:
		{/* P */
			if (MSVE.FRESH)
			{
				if (AO[MSVE.tmpi[0]].v.val!=-2)
				{
					MSVE.tmpi[2] = 1;
					MSVE.tmpi[1]++;
					break;
				}

				MSVE.tmpv.class = c_unknown;
				MSVE.tmpv.unit = u_generic_unknown;
				MSVE.tmpv.calc_unit = u_generic_unknown;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].P.val;   /*.val RS*/
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].P.val;    /*.val RS*/
				sprintf (MSVE.str[3], "AO #%d P", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 9, 3, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				/*AO[MSVE.tmpi[0]].P = MSVE.tmpv.val;*/
				VAR_Update(&AO[MSVE.tmpi[0]].P, MSVE.tmpv.val, 0, 0); /*TYPE change Add PID to stream table RS*/
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 83:
		{/* I */
			if (MSVE.FRESH)
			{
				if (AO[MSVE.tmpi[0]].v.val!=-2)
				{
					MSVE.tmpi[2] = 1;
					MSVE.tmpi[1]++;
					break;
				}

				MSVE.tmpv.class = c_unknown;
				MSVE.tmpv.unit = u_generic_unknown;
				MSVE.tmpv.calc_unit = u_generic_unknown;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].I.val;        /*.val RS*/
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].I.val;   /*.val RS*/
				sprintf (MSVE.str[3], "AO #%d I", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 9, 3, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				/*AO[MSVE.tmpi[0]].I = MSVE.tmpv.val;  */
				VAR_Update(&AO[MSVE.tmpi[0]].I, MSVE.tmpv.val, 0, 0); /*TYPE change Add PID to stream table RS*/
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 84:
		{/* D */
			if (MSVE.FRESH)
			{
				if (AO[MSVE.tmpi[0]].v.val!=-2)
				{
					MSVE.tmpi[2] = 1;
					MSVE.tmpi[1]++;
					break;
				}

				MSVE.tmpv.class = c_unknown;
				MSVE.tmpv.unit = u_generic_unknown;
				MSVE.tmpv.calc_unit = u_generic_unknown;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].D.val;      /*.val RS*/
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].D.val;  /*.val RS*/
				sprintf (MSVE.str[3], "AO #%d D", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 9, 3, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				/*AO[MSVE.tmpi[0]].D = MSVE.tmpv.val; */
				VAR_Update(&AO[MSVE.tmpi[0]].D, MSVE.tmpv.val, 0, 0); /*TYPE change Add PID to stream table RS*/
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1]++;
			}

			break;
		}

		case 85:
		{/* Setpoint */
			if (MSVE.FRESH)
			{
				if (AO[MSVE.tmpi[0]].v.val!=-2)
				{
					MSVE.tmpi[2] = 1;
					MSVE.tmpi[1] = 9;
					break;
				}

				MSVE.tmpv.class = AO[MSVE.tmpi[0]].class.val;
				MSVE.tmpv.unit = AO[MSVE.tmpi[0]].unit.val;
				MSVE.tmpv.calc_unit = AO[MSVE.tmpi[0]].unit.val;
				MSVE.tmpv.val = AO[MSVE.tmpi[0]].PID_setpoint;
				MSVE.tmpv.calc_val = AO[MSVE.tmpi[0]].PID_setpoint;
				sprintf (MSVE.str[3], "AO #%d PID Setpoint", MSVE.tmpi[0]+1);
			}

			MSVE_Data_Input(MSVE.str[3], "Value", 13, 1, 1, 0, &MSVE.tmpv, 1, 0);

			if (MSVE.ENTER)
			{
				AO[MSVE.tmpi[0]].PID_setpoint = MSVE.tmpv.val;
				Update_Flags_Goto_Next_Menu(1,1);
			}

			if (MSVE.MENU || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 9;
			}

			break;
		}

		case 9:
		{/* display current / manual current */

			if ((AO[MSVE.tmpi[0]].v.val>=0) && (!AO[MSVE.tmpi[0]].MANUAL))
			{
				if (MSVE.FRESH)
				{
					MSVE.FRESH = FALSE;
				}

				sprintf(LCD_DISPLAY[0],"  Analog Output #%d",MSVE.tmpi[0]+1);
				MSVE.ptmpv = HART_Lookup(AO[MSVE.tmpi[0]].v.val, &ui, (int*)&HART_DV_Table);
				Get_Unit(AO[MSVE.tmpi[0]].CURRENT.class, AO[MSVE.tmpi[0]].CURRENT.unit, u);
				Get_Unit(AO[MSVE.tmpi[0]].CURRENT_PERCENT_OF_RANGE.class, AO[MSVE.tmpi[0]].CURRENT_PERCENT_OF_RANGE.unit, u1);
				sprintf(LCD_DISPLAY[1],"%6.2f %s / %6.2f %s", AO[MSVE.tmpi[0]].CURRENT.val, u, AO[MSVE.tmpi[0]].CURRENT_PERCENT_OF_RANGE.val, u1);

				Get_Unit(AO[MSVE.tmpi[0]].class.val, AO[MSVE.tmpi[0]].unit.val, u);
				sprintf(LCD_DISPLAY[2],"%s", MSVE.ptmpv->name);

				t = Convert(AO[MSVE.tmpi[0]].class.val, MSVE.ptmpv->unit, AO[MSVE.tmpi[0]].unit.val, MSVE.ptmpv->val, 0, MSVE.ptmpv->aux);
				sprintf(LCD_DISPLAY[3],"%6.2f %s", t, u);
			}
			else
			{
				sprintf (MSVE.str[3], "Analog Out #%d", MSVE.tmpi[0]+1);

				MSVE_Data_Input(MSVE.str[3], "     AO", 6, 3, 0, 0, &AO[MSVE.tmpi[0]].CURRENT, 1, 1);

				if (MSVE.MENU)
				{/* save the last entered current, if manual mode */
					Update_Flags_Goto_Next_Menu(1,1);
				}
			}

			if (MSVE.MENU)
			{
				MSVE.tmpi[2] = 1;
				MSVE.tmpi[1] = 0;
			}

			break;
		}

		case 0:
		{/* main screen to select port number */
			MSVE.MENU_TRAP = FALSE;

			if (MSVE.SELECT)
			{
				MSVE.tmpi[0]++;
				if (MSVE.tmpi[0]>=AO_NLOOPS) MSVE.tmpi[0] = 0;

				while (!AO[MSVE.tmpi[0]].present)
				{
					MSVE.tmpi[0]++;
					if (MSVE.tmpi[0]>=AO_NLOOPS) MSVE.tmpi[0] = 0;
				}
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[0]--;
				if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = AO_NLOOPS-1;

				while (!AO[MSVE.tmpi[0]].present)
				{
					MSVE.tmpi[0]--;
					if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = AO_NLOOPS-1;
				}
			}
			else
			if (MSVE.ENTER)
			{
				MSVE.MENU_TRAP = TRUE;

				MSVE.tmpi[2] = 1;

				MSVE.tmpi[1] = 1;
			}

			sprintf(LCD_DISPLAY[3],"  Analog Output #%d",MSVE.tmpi[0]+1);

			break;
		}

		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}                   


///////////////////////////////////////////////////////////////////////////////////////

//New RTD trimming submenu  -DA
void MENU_PAGE_TRIM_RTD_SELECT(void)
{
	int i;

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"      Trim RTD      ");
		sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = 0;
		MSVE.tmpi[1] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[4] = 0;
	}

	if (MSVE.tmpi[2]) //tmpi[2] means reset the variable for the next SUBpage
	{
		MSVE.tmpi[3] = 0;
		MSVE.tmpi[2] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}
	
	switch(MSVE.tmpi[0])
	{						
		case 0:
		{/* main screen to select port number */
			MSVE.MENU_TRAP = FALSE;
			MSVE.FRESH = FALSE;

			if (MSVE.SELECT)
			{
				MSVE.tmpi[1]++;
				if (MSVE.tmpi[1]>=3)
					MSVE.tmpi[1] = 1;
			}
			else if (MSVE.VALUE)
			{
				MSVE.tmpi[1]--;
				if (MSVE.tmpi[1]<1) MSVE.tmpi[1] = 2;
			}

			switch (MSVE.tmpi[1])
			{
				//MAIN PAGE
				case 0: 
				{
					sprintf(LCD_DISPLAY[3],"    SELECT LO/HI    ");
					
					if (MSVE.ENTER)
					{
						MSVE.MENU = TRUE;
						return;
					}
					
					break;
				}
				
				//OPTION TRIM LO
				case 1:
				{
					sprintf(LCD_DISPLAY[3],"      TRIM LO       ");
					
					if (MSVE.ENTER)
					{
						MSVE.tmpi[2] = 1; //set submenu reset flag
						MSVE.tmpi[0] = 1; // go to TRIM LO submenu
					}
					break;				
				}
				
				//OPTION TRIM HI
				case 2:
				{
					sprintf(LCD_DISPLAY[3],"      TRIM HI       ");
					
					if (MSVE.ENTER)
					{
						MSVE.tmpi[2] = 1; //set submenu reset flag
						MSVE.tmpi[0] = 3; // go to TRIM LO submenu
					}
					break;
				}

			}
			

			break;
		}
		
		// TRIM LO
		case 1:
		{
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"    Trim RTD Lo     ");
				sprintf(LCD_DISPLAY[1],"Connect 100 Ohm     ");
				sprintf(LCD_DISPLAY[3],"ENTER  = TRIM       ");  
			}
			
			sprintf(LCD_DISPLAY[2]," %7.4f Ohm",RTD_R); //this needs to update real-time
			
			if (MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1; // set submenu reset flag
				MSVE.tmpi[0] = 2; // go to CONFIRMATION TRIM LO 
			}
			
			break;
		}
		
		// CONFIRMATION TRIM LO
		case 2:
		{	
			if (MSVE.FRESH)
			{	
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"    Press SELECT    ");
				sprintf(LCD_DISPLAY[1],"     to CONFIRM     ");
				sprintf(LCD_DISPLAY[2],"--------------------"); 
				sprintf(LCD_DISPLAY[3],"Press MENU to CANCEL"); 
			} 
			if (MSVE.SELECT)
			{
				RTD_CAL.val= 0;	
				Calibrate_RTD();
				MSVE.tmpi[2] = 1; // set submenu reset flag
				MSVE.tmpi[0] = 5; // go to SUCCESS TRIM LO
							
			} 
			break;
		}
		
		//TRIM HI
		case 3:
		{
			if (MSVE.FRESH)
			{
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"    Trim RTD Hi");
				sprintf(LCD_DISPLAY[1],"Connect 125 Ohm");
				sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");
			}
			
			sprintf(LCD_DISPLAY[2]," %7.4f Ohm",RTD_R); //this needs to update real-time
			
			if (MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1; // set submenu reset flag
				MSVE.tmpi[0] = 4; // go to CONFIRMATION TRIM LO 
			}
			
			break;
		}
		
		//CONFIRMATION TRIM HI
		case 4:
		{
			if (MSVE.FRESH)
			{	
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0],"    Press SELECT    ");
				sprintf(LCD_DISPLAY[1],"     to CONFIRM     ");
				sprintf(LCD_DISPLAY[2],"--------------------"); 
				sprintf(LCD_DISPLAY[3],"Press MENU to CANCEL"); 
			} 
			if (MSVE.SELECT)
			{
				RTD_CAL.val= 1;	
				Calibrate_RTD();
				MSVE.tmpi[2] = 1; // set submenu reset flag
				MSVE.tmpi[0] = 6; // go to SUCCESS TRIM HI				
			} 
			break;
		}
		
		// SUCCESS TRIM LO
		case 5:
		{
			if (MSVE.FRESH)
			{	
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0]," TRIM LO COMPLETED  ");
				sprintf(LCD_DISPLAY[1],"--------------------");
				sprintf(LCD_DISPLAY[2],"  Press any button  "); 
				sprintf(LCD_DISPLAY[3],"    to continue     "); 
			} 
			if (MSVE.SELECT || MSVE.VALUE || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1; // set submenu reset flag
				MSVE.tmpi[0] = 0; // go to RTD main menu
				MSVE.tmpi[1] = 2; // set RTD main selection	to TRIM HI			
			} 
			break;
		}
		
		// SUCCESS TRIM HI
		case 6:
		{
			if (MSVE.FRESH)
			{	
				MSVE.FRESH = FALSE;
				sprintf(LCD_DISPLAY[0]," TRIM HI COMPLETED  ");
				sprintf(LCD_DISPLAY[1],"--------------------");
				sprintf(LCD_DISPLAY[2],"  Press any button  "); 
				sprintf(LCD_DISPLAY[3],"    to continue     "); 
			} 
			if (MSVE.SELECT || MSVE.VALUE || MSVE.ENTER)
			{
				MSVE.tmpi[2] = 1; // set submenu reset flag
				MSVE.tmpi[0] = 0; // go to RTD main menu
				MSVE.tmpi[1] = 0; // set RTD main selection	to default
			} 
			break;
		}		
		
		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

/* ***********OLD RTD TRIM CODE**********
void MENU_PAGE_TRIM_RTD_LO(void)      
{   
	if (MSVE.FRESH)
	{
		sprintf(LCD_DISPLAY[0],"    Trim RTD Lo");
		sprintf(LCD_DISPLAY[1],"Connect 100 Ohm");
		sprintf(LCD_DISPLAY[2]," %7.4f Ohm",RTD_R); 
		sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");  
	} 
	
	if (MSVE.ENTER)
	{
		TRIM_RTD_LO = TRUE; 
		MSVE.PAGE++;
	}  
} 

void MENU_PAGE_ASSURE_TRIM_RTD_LO(void)
{
	if (TRIM_RTD_LO == FALSE)
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
	}
	else
	{
    	if (MSVE.FRESH)
		{
			sprintf(LCD_DISPLAY[0],"   Press SELECT if");
			sprintf(LCD_DISPLAY[1],"    you are sure");
			sprintf(LCD_DISPLAY[2],""); 
			sprintf(LCD_DISPLAY[3]," Press MENU to skip"); 
		} 
    	if (MSVE.SELECT)
		{
			RTD_CAL.val= 0;	
			Calibrate_RTD();
			TRIM_RTD_LO = FALSE;
			MSVE.PAGE--;	
		} 
        if (MSVE.MENU)
		{
			TRIM_RTD_LO = FALSE; 
		}
	}
}

void MENU_PAGE_TRIM_RTD_HI(void)      
{   
	if (MSVE.FRESH)
	{
		sprintf(LCD_DISPLAY[0],"    Trim RTD Hi");
		sprintf(LCD_DISPLAY[1],"Connect 125 Ohm");
		sprintf(LCD_DISPLAY[2]," %7.4f Ohm",RTD_R); 
		sprintf(LCD_DISPLAY[3],"ENTER  = TRIM");
	} 
	
	if (MSVE.ENTER)
	{
		TRIM_RTD_HI = TRUE;
		MSVE.PAGE++;
	}
}  

void MENU_PAGE_ASSURE_TRIM_RTD_HI(void)
{
	if (TRIM_RTD_HI == FALSE)
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
	}
	else
	{
    	if (MSVE.FRESH)
		{
			sprintf(LCD_DISPLAY[0],"   Press SELECT if");
			sprintf(LCD_DISPLAY[1],"    you are sure");
			sprintf(LCD_DISPLAY[2],""); 
			sprintf(LCD_DISPLAY[3]," Press MENU to skip");
		} 
    	if (MSVE.SELECT)
		{
			RTD_CAL.val= 1;	
			Calibrate_RTD();
			TRIM_RTD_HI = FALSE;
			MSVE.PAGE--;	
		} 
        if (MSVE.MENU)
		{   
			TRIM_RTD_HI = FALSE;
		}
	}
} 

*/

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_OIL_CALC_MODE(void)
{
	if ((OIL_CALC_CUTOFF == 0.0) && (OIL_CALC_MAX[0] == 0.0) && (OIL_CALC_MAX[1] == 0.0))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  Calculation Mode");
		sprintf(LCD_DISPLAY[1],"Oil Curve Selection");
		sprintf(LCD_DISPLAY[2],"");
		MSVE.tmpi[0] = OIL_CALC_MODE;
	}

	switch(MSVE.tmpi[0])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"  %4.0f%%  Curve Set", OIL_CALC_MAX[0]);	break;
		case 2:		sprintf(LCD_DISPLAY[3],"  %4.0f%%  Curve Set", OIL_CALC_MAX[1]);	break;
		case 3:		sprintf(LCD_DISPLAY[3],"    Auto Select");	break;

		default:	MSVE.tmpi[0]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"       Normal");	break;
	}

	if (MSVE.SELECT||MSVE.VALUE)
	{
		MSVE.tmpi[0]++;
	}

	if (MSVE.ENTER)
	{
		OIL_CALC_MODE = MSVE.tmpi[0];
		Update_Flags_Goto_Next_Menu(1,0);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DENSITY_CORRECTION(void)
{
	//if (((ANALYZER_MODE.val&0xFF)==SUB_HIGH) || ((ANALYZER_MODE.val&0xFF)==SUB_FULL))
	if ((ANALYZER_MODE.val&0xFF)==SUB_HIGH)
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
	}
	else
	{
		if (MSVE.FRESH)
		{
			MSVE.FRESH = FALSE;
			sprintf(LCD_DISPLAY[0]," Density Correction");
			sprintf(LCD_DISPLAY[1],"");
			sprintf(LCD_DISPLAY[2],"");
			MSVE.tmpi[0] = Density_Correction_Mode.val;
		}

		switch(MSVE.tmpi[0])
		{
			case 1:		sprintf(LCD_DISPLAY[3]," CORIOLIS, PDI TMP");				break;
			case 2:		sprintf(LCD_DISPLAY[3]," CORIOLIS, ALT TEMP");				break;
			case 3:		sprintf(LCD_DISPLAY[3],"COR-API60F, COR TMP");				break;
			case 4:		sprintf(LCD_DISPLAY[3],"COR-API60F, PDI TMP");				break;
			case 5:		sprintf(LCD_DISPLAY[3],"COR-API60F, ALT TMP");				break;
			case 6:		sprintf(LCD_DISPLAY[3],"       OTHER");						break;
			default:	MSVE.tmpi[0]=0; sprintf(LCD_DISPLAY[3],"      DISABLED");	break;
		}

		if (MSVE.SELECT)
		{
			MSVE.tmpi[0]++;
			if (MSVE.tmpi[0]>6) MSVE.tmpi[0] = 0;
		}
		else
		if (MSVE.VALUE)
		{
			MSVE.tmpi[0]--;
			if (MSVE.tmpi[0]<0) MSVE.tmpi[0] = 6;
		}

		if (MSVE.ENTER)
		{
			MSVE.tmpi[1] = Density_Correction_Mode.val;

			if (MSVE.tmpi[1] != MSVE.tmpi[0])
			{
				if ((MSVE.tmpi[0]==1)||(MSVE.tmpi[0]==4)||(MSVE.tmpi[0]==6)||(MSVE.tmpi[0]==0))
				{
					FC[0].USE_PDI_TEMP = TRUE;
				}
				else
				{
					FC[0].USE_PDI_TEMP = FALSE;
				}

				if (MSVE.tmpi[0]==6)
				{
					DCM_PORT.val = -1;

//					if (AI[0].v != 7)
//					{/* setup FC1 Density if it is not already defined */
//						AI[0].v = 7;		/* point to FC[0].density */
//						AI[0].class.val = c_mass_per_volume;
//						AI[0].unit.val = u_mpv_kg_cm;
//						AI[0].LRV.unit = AI[0].unit.val;
//						AI[0].URV.unit = AI[0].unit.val;
//						AI[0].LRV.class = AI[0].class.val;
//						AI[0].URV.class = AI[0].class.val;
//						VAR_Update(&AI[0].URV, 1000.0, 0, 0);
//						VAR_Update(&AI[0].LRV, 0.0, 0, 0);
//					}
				}
				else
				{
					DCM_PORT.val = 3;
//					DCM_PORT.val = 2;
//					if (AI[0].v == 7)
//					{/* disable FC1 Density */
//						AI[0].v = -1;
//					}
				}
			}

			Density_Correction_Mode.val = MSVE.tmpi[0];
			Set_Density_Correction(0);
			Update_Flags_Goto_Next_Menu(1,0);
		}
	}
}

/******************** third order density correction RS *********************/ 
/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_D3(void)
{
	if (!(FC[0].enable_DENSITY && Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "D3   ", 13, 1, 1, 1, &Density_D3, 0, 0);
}  

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_D2(void)
{
	if (!(FC[0].enable_DENSITY && Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "D2   ", 13, 1, 1, 1, &Density_D2, 0, 0);
}
/******************** third order density correction RS *********************/

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_D1(void)
{
	if (!(FC[0].enable_DENSITY && Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "D1   ", 13, 1, 1, 1, &Density_D1, 0, 0);
}	

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_D0(void)
{
	if (!(FC[0].enable_DENSITY && Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "D0   ", 13, 1, 1, 1, &Density_D0, 0, 0);
}	

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_Cal_Unit(void)
{
	if (!(FC[0].enable_DENSITY && Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," Density Corr. Unit");
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		MSVE.tmpi[0] = Density_Cal_Unit.val;
	}

	switch(MSVE.tmpi[0])
	{
		case 107:	sprintf(LCD_DISPLAY[3],"     kg/m3 15C");	break;

		default:	MSVE.tmpi[0]=105;
		case 105:	sprintf(LCD_DISPLAY[3],"      %cAPI 60F", 0xDF);	break;
	}

	if (MSVE.SELECT||MSVE.VALUE)
	{
		if (MSVE.tmpi[0]==105) MSVE.tmpi[0] = 107;
		else MSVE.tmpi[0] = 105;
	}

	if (MSVE.ENTER)
	{
		Density_Cal_Unit.val = MSVE.tmpi[0];
		Set_Density_Cal_Unit(0);
		Update_Flags_Goto_Next_Menu(1,0);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_Cal(void)
{
	if (!(FC[0].enable_DENSITY && Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "CAL", 7, 2, 1, 0, &Density_Cal, 0, 0);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DCM_PORT(void)
{
	int i;

	if ((Density_Correction_Mode.val==0) || (Density_Correction_Mode.val==6) || (ALYESKA.ENABLED) || (!FC[0].enable_DENSITY))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	if (MSVE.FRESH)
	{
		for(i=0;i<4;i++)
		{
			if (PORT[i].PRESENT) break;
		}

		if (i==4)
		{
			if (!MSVE.DIR) MSVE.PAGE++;
			else MSVE.PAGE--;
			return;
		}

		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   Coriolis Port");
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		MSVE.tmpi[0] = DCM_PORT.val;
	}

	switch(MSVE.tmpi[0])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"       COMM 2");	break;
		case 2:		sprintf(LCD_DISPLAY[3],"       COMM 3");	break;
		case 3:		sprintf(LCD_DISPLAY[3],"       COMM 4");	break;

		default:	MSVE.tmpi[0]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"       COMM 1");	break;
	}

	if (MSVE.SELECT||MSVE.VALUE)
	{
		MSVE.tmpi[0]++;
	}

	if (MSVE.ENTER)
	{
		DCM_PORT.val = MSVE.tmpi[0];
		Set_Density_Correction(0);
		Update_Flags_Goto_Next_Menu(1,0);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DCM_CFG_DAMP_FR(void)
{
	if ((Density_Correction_Mode.val==0) || (Density_Correction_Mode.val==6))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "Damp   ", 4, 1, 0, 0, &COR[0].damp_flow_rate, 0, 0);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DCM_CFG_DAMP_DENSITY(void)
{
	if ((Density_Correction_Mode.val==0) || (Density_Correction_Mode.val==6))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	MSVE_Data_Input("", "Damp   ", 4, 1, 0, 0, &COR[0].damp_density, 0, 0);
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DCM_CFG_CUTOFF(void)
{
	if ((Density_Correction_Mode.val==0) || (Density_Correction_Mode.val==6))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	if (FC[0].flow_class.val==c_mass_flow)
	{
		MSVE_Data_Input("", "Cutoff ", 6, 0, 0, 0, &COR[0].mfr_cutoff, 0, 0);
	}
	else
	{
		MSVE_Data_Input("", "Cutoff ", 6, 0, 0, 0, &COR[0].vfr_cutoff, 0, 0);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_DCM_ZERO(void)
{
	int i;

	if ((Density_Correction_Mode.val==0) || (Density_Correction_Mode.val==6))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	if (MSVE.FRESH)
	{
		for(i=0;i<4;i++)
		{
			if (PORT[i].PRESENT) break;
		}

		if (i==4)
		{
			if (!MSVE.DIR) MSVE.PAGE++;
			else MSVE.PAGE--;
			return;
		}

		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   Coriolis Zero");
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
	}

	MSVE.tmpi[0] = COR[0].Z.val & 0x01;

	switch(MSVE.tmpi[0])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"   In Progress...");	break;

		default:
		case 0:		sprintf(LCD_DISPLAY[3],"ENTER = START ZERO");	break;
	}

	if (MSVE.ENTER && !MSVE.tmpi[0])
	{
		CORIOLIS_ZERO1();
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_Density_ADJ(void)
{
	if ((!FC[0].enable_DENSITY)||(!Density_Correction_Mode.val))
	{
		if (!MSVE.DIR) MSVE.PAGE++;
		else MSVE.PAGE--;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.tmpv.class = FC[0].density.class;
		MSVE.tmpv.unit = FC[0].density.unit;
		MSVE.tmpv.calc_unit = FC[0].density.unit;
		MSVE.tmpv.val = FC[0].density_adj;
		MSVE.tmpv.calc_val = FC[0].density_adj;
		sprintf (MSVE.str[3], "FC1 Density Adjust");
	}

	MSVE_Data_Input(MSVE.str[3], "Adj", 8, 4, 1, 0, &MSVE.tmpv, 1, 1);

	if (MSVE.ENTER)
	{
		FC[0].density_adj = MSVE.tmpv.val;
		Update_Flags_Goto_Next_Menu(1,0);
	}
}

/****************************************************************************/
/* 							FLOW COMPUTER MENUS 							*/
/****************************************************************************/
/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_PRESSURE_UNIT(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Pressure Unit", n+1);
		MSVE.tmpi[4] = FC[n].pressure.class;
		Get_Class(MSVE.tmpi[4], MSVE.str[3]);
		sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
		MSVE.tmpi[3] = FC[n].pressure.unit & 0xFF;
	}

	Get_Unit(MSVE.tmpi[4], MSVE.tmpi[3], MSVE.str[3]);

	sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
	sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

	if (MSVE.ENTER)
	{
		FC[n].pressure.unit = MSVE.tmpi[3];
		FC[n].pressure.calc_unit = MSVE.tmpi[3];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
	else
	if (MSVE.SELECT)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
	else
	if (MSVE.VALUE)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_TEMP_UNIT(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"FC%d Temperature Unit", n+1);
		MSVE.tmpi[4] = FC[n].T.class;
		Get_Class(MSVE.tmpi[4], MSVE.str[3]);
		sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
		MSVE.tmpi[3] = FC[n].T.unit & 0xFF;
	}

	Get_Unit(MSVE.tmpi[4], MSVE.tmpi[3], MSVE.str[3]);

	sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
	sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

	if (MSVE.ENTER)
	{
		FC[n].T.unit = MSVE.tmpi[3];
		FC[n].T.calc_unit = MSVE.tmpi[3];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
	else
	if (MSVE.SELECT)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
	else
	if (MSVE.VALUE)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_DENSITY_UNIT(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  FC%d Density Unit", n+1);
		MSVE.tmpi[4] = FC[n].density.class;
		Get_Class(MSVE.tmpi[4], MSVE.str[3]);
		sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
		MSVE.tmpi[3] = FC[n].density.unit & 0xFF;
	}

	Get_Unit(MSVE.tmpi[4], MSVE.tmpi[3], MSVE.str[3]);

	sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
	sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

	if (MSVE.ENTER)
	{
		FC[n].density.unit = MSVE.tmpi[3];
		FC[n].density.calc_unit = MSVE.tmpi[3];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
	else
	if (MSVE.SELECT)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
	else
	if (MSVE.VALUE)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_ACCUM_UNIT(int n)
{
	int units[3];
	float r;

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"FC%d Accumulator Unit", n+1);
		Breakout_Flow_Units(FC[n].flow_class.val, FC[n].flow_unit.val, units, &r);
		MSVE.tmpi[4] = units[2];
		Get_Class(MSVE.tmpi[4], MSVE.str[3]);
		sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
		MSVE.tmpi[3] = FC[n].accum_unit.val & 0xFF;
	}

	Get_Unit(MSVE.tmpi[4], MSVE.tmpi[3], MSVE.str[3]);

	sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
	sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

	if (MSVE.ENTER)
	{
		FC[n].accum_unit.val = MSVE.tmpi[3];
		Set_FC_Units(0);
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
	else
	if (MSVE.SELECT)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
	else
	if (MSVE.VALUE)
	{
		if (MSVE.tmpi[4]!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(MSVE.tmpi[4], MSVE.tmpi[3]);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_FLOW_UNIT(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   FC%d Flow Unit", n+1);
		MSVE.tmpi[4] = FC[n].flow_class.val;
		Get_Class(MSVE.tmpi[4], MSVE.str[3]);
		sprintf(LCD_DISPLAY[1],"Class: %s", MSVE.str[3]);
		MSVE.tmpi[3] = FC[n].flow_unit.val & 0xFF;
	}

	Get_Unit(MSVE.tmpi[4], MSVE.tmpi[3], MSVE.str[3]);

	sprintf(LCD_DISPLAY[2],"Code : %d", MSVE.tmpi[3]);
	sprintf(LCD_DISPLAY[3],"Unit : %s", MSVE.str[3]);

	if (MSVE.ENTER)
	{
		FC[n].flow_unit.val = MSVE.tmpi[3];
		Set_FC_Units(0);
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
	else
	if (MSVE.SELECT)
	{
		if (FC[n].flow_class.val!=c_not_classified) MSVE.tmpi[3] = Get_Next_Unit(FC[n].flow_class.val, MSVE.tmpi[3]);
	}
	else
	if (MSVE.VALUE)
	{
		if (FC[n].flow_class.val!=c_not_classified) MSVE.tmpi[3] = Get_Prev_Unit(FC[n].flow_class.val, MSVE.tmpi[3]);
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_FLOW_CLASS(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   FC%d Flow Class", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if	(FC[n].flow_class.val!=c_volumetric_flow)
		{
			MSVE.tmpi[1] = 1;
			FC[n].flow_class.val = c_mass_flow;
		}
		else
		{
			MSVE.tmpi[1] = 0;
			FC[n].flow_class.val = c_volumetric_flow;
		}
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"     Mass Flow");		break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"  Volumetric Flow");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		if (MSVE.tmpi[1])
		{
			FC[n].flow_class.val = c_mass_flow;
		}
		else
		{
			FC[n].flow_class.val = c_volumetric_flow;
		}
		Set_FC_Units(0);
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_EMUL_DENSITY(int n)
{
	if (!FC[n].MAN_DENSITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "Emul.  ", 7, 3, 0, 0, &FC[n].density, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_SALINITY(int n)
{
	if (FC[n].USE_PDI_SALINITY && !FC[n].MAN_SALINITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "Salt   ", 7, 3, 0, 0, &FC[n].salinity, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_WATERCUT(int n)
{
	if (USE_PDI_WATERCUT.val && !FC[n].MAN_WATERCUT)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "WC     ", 7, 3, 0, 0, &FC[n].watercut, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_PRESSURE(int n)
{
	if (!FC[n].MAN_PRESSURE)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "Press  ", 7, 3, 0, 0, &FC[n].pressure, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_TEMP(int n)
{
	if (FC[n].USE_PDI_TEMP && !FC[n].MAN_TEMP)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "Temp   ", 7, 3, 0, 0, &FC[n].T, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_FLOW(int n)
{
	if (FC[n].enable_PULSE || !FC[n].MAN_FLOW)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "Flow   ", 7, 3, 0, 0, &FC[n].FLOW_TOTAL, 0, 1);
/* todo: this shows blank instead of 0 for MIN */

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_WATER_DENSITY_PT(int n)
{
	if (!FC[n].enable_NET && !FC[n].MAN_DENSITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "WaterPT", 7, 3, 0, 0, &FC[n].density_water, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_WATER_DENSITY_ST(int n)
{
	if (!FC[n].enable_NET)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "WaterST", 7, 3, 0, 0, &FC[n].density_waterST, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_OIL_DENSITY_PT(int n)
{
	if (!FC[n].enable_NET && !FC[n].MAN_DENSITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "OilPT  ", 7, 3, 0, 0, &FC[n].density_oil, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_OIL_DENSITY_ST(int n)
{
	if (!FC[n].enable_NET)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "OilST  ", 7, 3, 0, 0, &FC[n].density_oilST, 0, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_SHRINKAGE(int n)
{
	if (!FC[n].enable_NET)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "SHRNK  ", 7, 5, 0, 0, &FC[n].Shrinkage, 1, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_METER_FACTOR(int n)
{
	if (!FC[n].enable_NET)
	{
		MSVE.tmpi[0]++;
		return;
	}

	MSVE_Data_Input("", "M.F.", 7, 5, 0, 0, &FC[n].Meter_Factor, 1, 1);

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_ENABLE_NET(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   FC%d Net Enable", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].enable_NET) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"         ON");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"        OFF");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].enable_NET = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_ENABLE_DENSITY(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Density Enable", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].enable_DENSITY) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"         ON");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"        OFF");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].enable_DENSITY = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_ENABLE_PULSE(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  FC%d Pulse Enable", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].enable_PULSE) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"         ON");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"        OFF");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].enable_PULSE = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_ENABLE_GROSS(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  FC%d Gross Enable", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].enable_GROSS) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"         ON");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"        OFF");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].enable_GROSS = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_ENABLE_FLOW(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  FC%d Flow Enable", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].enable_FLOW) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"         ON");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"        OFF");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].enable_FLOW = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

void MENU_LOG_DATA_ENABLE(void)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  USB Data Logging  ");
		sprintf(LCD_DISPLAY[2],"");
		sprintf(LCD_DISPLAY[3],"");
		if (BEGIN_ALFAT_LOGGING.val) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	
	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[1],"         ON");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[1],"        OFF");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		if(BEGIN_ALFAT_LOGGING.val != (MSVE.tmpi[1] & 0x01))
		{
			BEGIN_ALFAT_LOGGING.val = (MSVE.tmpi[1] & 0x01);
			Begin_Alfat_Logging(&BEGIN_ALFAT_LOGGING); //toggle logging
		}
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

void MENU_LOG_DATA_STATUS(void)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"Data Logging Status");
		sprintf(LCD_DISPLAY[1],"");
		MSVE.tmpi[6] = 0;
		MSVE.tmpi[7] = 0;		
	}
	
	if (ALFAT_USB_DETECTED.val != MSVE.tmpi[6]) //don't keep rewriting if nothing has changed
	{
		if (ALFAT_USB_DETECTED.val)
			MSVE.tmpi[6] = 1;
		else
			MSVE.tmpi[6] = 0;
	}
	
	if (ALFAT_USB_MOUNTED.val != MSVE.tmpi[7]) //don't keep rewriting if nothing has changed
	{
		if (ALFAT_USB_MOUNTED.val)
			MSVE.tmpi[7] = 1;
		else
			MSVE.tmpi[7] = 0;
	}
	
	switch(MSVE.tmpi[6])
	{
		case 1:		sprintf(LCD_DISPLAY[2],"MEDIA DETECTED?: YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[2],"MEDIA DETECTED?: NO");	break;
	}
	
	switch(MSVE.tmpi[7])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"MEDIA MOUNTED?:  YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"MEDIA MOUNTED?:  NO");	break;
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_USE_PDI_TEMP(int n)
{
	if (FC[n].MAN_TEMP)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Use PDI Temp.?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].USE_PDI_TEMP) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].USE_PDI_TEMP = MSVE.tmpi[1];
		if (FC[n].USE_PDI_TEMP) FC[n].MAN_TEMP = FALSE;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_USE_PDI_SALINITY(int n)
{
	if (FC[n].MAN_SALINITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Use PDI Salt?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].USE_PDI_SALINITY) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].USE_PDI_SALINITY = MSVE.tmpi[1];
		if (FC[n].USE_PDI_SALINITY) FC[n].MAN_SALINITY = FALSE;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_USE_PDI_WATERCUT(int n)
{
	if (FC[n].MAN_WATERCUT)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Use PDI WCut?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (USE_PDI_WATERCUT.val) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		USE_PDI_WATERCUT.val = MSVE.tmpi[1];
		if (USE_PDI_WATERCUT.val) FC[n].MAN_WATERCUT = FALSE;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_API_TABLE(int n)
{
	if ((!FC[n].enable_NET) && (!FC[n].enable_DENSITY))
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"   FC%d API Table", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		MSVE.tmpi[1] = FC[n].API_TABLE>>8;
	}

	switch(MSVE.tmpi[1])
	{
		case 'B':		sprintf(LCD_DISPLAY[3],"B: General Products");				break;
		case 'C':		sprintf(LCD_DISPLAY[3],"C: Special");						break;
		case 'D':		sprintf(LCD_DISPLAY[3],"D: General Lubricant");				break;

		default:		MSVE.tmpi[1]='A';
		case 'A':		sprintf(LCD_DISPLAY[3],"A: General Crude");					break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1]++;
		if (MSVE.tmpi[1]>'D') MSVE.tmpi[1] = 'A';
	}

	if (MSVE.ENTER)
	{
		FC[n].API_TABLE = MSVE.tmpi[1]<<8;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_DENSITY_ADJ(int n)
{
	if (!FC[n].enable_DENSITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.tmpv.class = FC[0].density.class;
		MSVE.tmpv.unit = FC[0].density.unit;
		MSVE.tmpv.calc_unit = FC[0].density.unit;
		MSVE.tmpv.val = FC[0].density_adj;
		MSVE.tmpv.calc_val = FC[0].density_adj;
		sprintf (MSVE.str[3], "FC%d Density Adjust",n+1);
	}

	MSVE_Data_Input(MSVE.str[3], "Adj", 8, 4, 1, 0, &MSVE.tmpv, 1, 1);
	if (MSVE.ENTER)
	{
		FC[n].density_adj = MSVE.tmpv.val;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_API_C_ALPHA(int n)
{
	if ((FC[n].API_TABLE>>8 != 'C') || !((FC[n].enable_NET) || (FC[n].enable_DENSITY)))
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.tmpv.class = c_none;
		MSVE.tmpv.unit = u_generic_none;
		MSVE.tmpv.calc_unit = u_generic_none;
		MSVE.tmpv.val = FC[n].a;
		MSVE.tmpv.calc_val = FC[n].a;
		sprintf (MSVE.str[3], "FC%d API Curve C",n+1);
	}

	MSVE_Data_Input(MSVE.str[3], "alpha", 13, 1, 1, 1, &MSVE.tmpv, 1, 1);

	if (MSVE.ENTER)
	{
		FC[n].a = MSVE.tmpv.val;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_MAN_FLOW(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  FC%d Manual Flow?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].MAN_FLOW) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].MAN_FLOW = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_MAN_TEMP(int n)
{
	if (FC[n].USE_PDI_TEMP)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Manual Temp.?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].MAN_TEMP) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].MAN_TEMP = MSVE.tmpi[1];
		if (FC[n].MAN_TEMP) FC[n].USE_PDI_TEMP = FALSE;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_MAN_WATERCUT(int n)
{
	if (USE_PDI_WATERCUT.val)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"FC%d Manual Process?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].MAN_WATERCUT) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].MAN_WATERCUT = MSVE.tmpi[1];
		if (FC[n].MAN_WATERCUT) USE_PDI_WATERCUT.val = FALSE;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_MAN_PRESSURE(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"FC%d Manual Pressure?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].MAN_PRESSURE) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].MAN_PRESSURE = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_MAN_DENSITY(int n)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0]," FC%d Manual Density?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].MAN_DENSITY) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].MAN_DENSITY = MSVE.tmpi[1];
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_MAN_SALINITY(int n)
{
	if (FC[n].USE_PDI_SALINITY)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"  FC%d Manual Salt?", n+1);
		sprintf(LCD_DISPLAY[1],"");
		sprintf(LCD_DISPLAY[2],"");
		if (FC[n].MAN_SALINITY) MSVE.tmpi[1] = 1;
		else MSVE.tmpi[1] = 0;
	}

	switch(MSVE.tmpi[1])
	{
		case 1:		sprintf(LCD_DISPLAY[3],"        YES");	break;
		default:	MSVE.tmpi[1]=0;
		case 0:		sprintf(LCD_DISPLAY[3],"         NO");	break;
	}

	if (MSVE.VALUE || MSVE.SELECT)
	{
		MSVE.tmpi[1] ^= 0x01;
	}

	if (MSVE.ENTER)
	{
		FC[n].MAN_SALINITY = MSVE.tmpi[1];
		if (FC[n].MAN_SALINITY) FC[n].USE_PDI_SALINITY = FALSE;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FC_PULSES_PER_VOL_UNIT(int n)
{
	if (!FC[n].enable_PULSE)
	{
		MSVE.tmpi[0]++;
		return;
	}

	if (MSVE.FRESH)
	{
		MSVE.tmpv.class = c_none;
		MSVE.tmpv.unit = u_generic_none;
		MSVE.tmpv.calc_unit = u_generic_none;
		MSVE.tmpv.val = FC[n].PULSES_PER_ACCUM_UNIT;
		MSVE.tmpv.calc_val = FC[n].PULSES_PER_ACCUM_UNIT;
		Get_Unit(FC[n].PULSE_TOTAL.class, FC[n].PULSE_TOTAL.unit, MSVE.str[2]);
		MSVE.tmpv.bound_hi_set = 15000;
		MSVE.tmpv.bound_lo_set = 0;
		sprintf (MSVE.str[3], "FC%d #Pulses/%s",n+1,MSVE.str[2]);
	}

	MSVE_Data_Input(MSVE.str[3], "#Pulses", 5, 0, 0, 0, &MSVE.tmpv, 1, 1);

	if (MSVE.ENTER)
	{
		FC[n].PULSES_PER_ACCUM_UNIT = MSVE.tmpv.val;
		Update_Flags_Goto_Next_Menu(1,1);
	}

	if (MSVE.MENU || MSVE.ENTER)
	{
		MSVE.MENU = 0;
		MSVE.ENTER = 0;
		MSVE.tmpi[0]++;
		MSVE.tmpi[8] = 1;
	}
}

/****************************************************************************/
/* NAME																		*/
/*                                                                          */
/* Description:                                                             */
/*                                                                          */
/* Arguments:                                                               */
/*                                                                          */
/* Returns:                                                                 */
/*                                                                          */
/* Notes:                                                                   */
/*                                                                          */
/****************************************************************************/
void MENU_FLOW_COMPUTER(void)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"Config Flow Computer");
		sprintf(LCD_DISPLAY[1]," ");/*remove FC2 FC3 from LCD RS*/
		/*sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");*/
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = 0;
		MSVE.tmpi[9] = 0;
		MSVE.tmpi[8] = 0;
	}

	if (MSVE.tmpi[8])
	{/* refresh sub-menu */
		MSVE.tmpi[8] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}

	switch(MSVE.tmpi[0])
	{
		case 1:
		{
			MENU_FC_ENABLE_FLOW(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==1)break;
		}

		case 2:
		{
			MENU_FC_ENABLE_GROSS(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==2)break;
		}

		case 3:
		{
			MENU_FC_ENABLE_PULSE(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==3)break;
		}

		case 4:
		{
			MENU_FC_ENABLE_DENSITY(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==4)break;
		}

		case 5:
		{
			MENU_FC_ENABLE_NET(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==5)break;
		}

		case 6:
		{
			MENU_FC_FLOW_CLASS(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==6)break;
		}

		case 7:
		{
			MENU_FC_FLOW_UNIT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==7)break;
		}

		case 8:
		{
			MENU_FC_ACCUM_UNIT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==8)break;
		}

		case 9:
		{
			MENU_FC_PULSES_PER_VOL_UNIT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==9)break;
		}

		case 10:
		{
			MENU_FC_TEMP_UNIT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==10)break;
		}

		case 11:
		{
			MENU_FC_DENSITY_UNIT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==11)break;
		}

		case 12:
		{
			MENU_FC_PRESSURE_UNIT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==12)break;
		}

		case 13:
		{
			MENU_FC_MAN_WATERCUT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==13)break;
		}

		case 14:
		{
			MENU_FC_MAN_TEMP(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==14)break;
		}

		case 15:
		{
			MENU_FC_MAN_SALINITY(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==15)break;
		}

		case 16:
		{
			MENU_FC_MAN_DENSITY(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==16)break;
		}

		case 17:
		{
			MENU_FC_MAN_PRESSURE(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==17)break;
		}

		case 18:
		{
			MENU_FC_MAN_FLOW(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==18)break;
		}

		case 19:
		{
			MENU_FC_USE_PDI_WATERCUT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==19)break;
		}

		case 20:
		{
			MENU_FC_USE_PDI_TEMP(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==20)break;
		}

		case 21:
		{
			MENU_FC_USE_PDI_SALINITY(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==21)break;
		}

		case 22:
		{
			MENU_FC_API_TABLE(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==22)break;
		}

		case 23:
		{
			MENU_FC_API_C_ALPHA(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==23)break;
		}

		case 24:
		{
			MENU_FC_METER_FACTOR(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==24)break;
		}

		case 25:
		{
			MENU_FC_SHRINKAGE(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==25)break;
		}

		case 26:
		{
			MENU_FC_OIL_DENSITY_ST(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==26)break;
		}

		case 27:
		{
			MENU_FC_WATER_DENSITY_ST(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==27)break;
		}

		case 28:
		{
			MENU_FC_FLOW(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==28)break;
		}

		case 29:
		{
			MENU_FC_WATERCUT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==29)break;
		}

		case 30:
		{
			MENU_FC_PRESSURE(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==30)break;
		}

		case 31:
		{
			MENU_FC_TEMP(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==31)break;
		}

		case 32:
		{
			MENU_FC_SALINITY(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==32)break;
		}

		case 33:
		{
			MENU_FC_EMUL_DENSITY(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==33)break;
		}

		case 34:
		{
			MENU_FC_OIL_DENSITY_PT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==34)break;
		}

		case 35:
		{
			MENU_FC_WATER_DENSITY_PT(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==35)break;
		}

		case 36:
		{
			MENU_FC_DENSITY_ADJ(MSVE.tmpi[9]);
			if (MSVE.tmpi[0]==36)break;
		}

		case 0:
		{/* main screen to select fow computer */
			MSVE.MENU_TRAP = FALSE;       
			
            /*remove FC2 FC3 from LCD RS*/
			/*if (MSVE.SELECT)
			{
				MSVE.tmpi[9]++;
				if (MSVE.tmpi[9]>=FCMAX) MSVE.tmpi[9] = 0;
			}
			else
			if (MSVE.VALUE)
			{
				MSVE.tmpi[9]--;
				if (MSVE.tmpi[9]<0) MSVE.tmpi[9] = FCMAX-1;
			}
			else*/
			if (MSVE.ENTER)
			{
				MSVE.MENU = 0;
				MSVE.ENTER = 0;
				MSVE.MENU_TRAP = TRUE;
				MSVE.tmpi[0]++;
				MSVE.tmpi[8] = 1;
			}
            
            /*sprintf(LCD_DISPLAY[3],"  Flow Computer %d",MSVE.tmpi[9]+1); */
            sprintf(LCD_DISPLAY[3]," ");     /*remove FC2 FC3 from LCD RS*/
			
			break;
		}

		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}

void MENU_LOG_DATA(void)
{
	if (MSVE.FRESH)
	{
		MSVE.FRESH = FALSE;
		sprintf(LCD_DISPLAY[0],"Config Data Logging");
		sprintf(LCD_DISPLAY[1]," ");/*remove FC2 FC3 from LCD RS*/
		/*sprintf(LCD_DISPLAY[1],"SELECT = CHANGE");*/
		sprintf(LCD_DISPLAY[2],"ENTER  = GOTO CONFIG");
		MSVE.tmpi[0] = 0;
		MSVE.tmpi[9] = 0;
		MSVE.tmpi[8] = 0;
	}

	if (MSVE.tmpi[8])
	{/* refresh sub-menu */
		MSVE.tmpi[8] = 0;
		MSVE.FRESH = TRUE;
		MSVE.CURSOR_ENABLED = FALSE;
	}

	switch(MSVE.tmpi[0])
	{
		case 1:
		{
			MENU_LOG_DATA_ENABLE();
			if (MSVE.tmpi[0]==1)
				break;
		}

		case 2:
		{
			MENU_LOG_DATA_STATUS();
			if (MSVE.tmpi[0]==2)
				break;
		}
		case 0:
		{/* main screen to select fow computer */
			MSVE.MENU_TRAP = FALSE;       

			if (MSVE.ENTER)
			{
				MSVE.MENU = 0;
				MSVE.ENTER = 0;
				MSVE.MENU_TRAP = TRUE;
				MSVE.tmpi[0]++;
				MSVE.tmpi[8] = 1;
			}
            
            /*sprintf(LCD_DISPLAY[3],"  Flow Computer %d",MSVE.tmpi[9]+1); */
            sprintf(LCD_DISPLAY[3]," ");     /*remove FC2 FC3 from LCD RS*/
			
			break;
		}

		default:
		{
			MSVE.FRESH = TRUE;
			break;
		}
	}
}
